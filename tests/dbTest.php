<?php

// application include
include '../library/app.db.php';

/**
 * Test class for db.
 * Generated by PHPUnit on 2012-02-21 at 15:27:49.
 */
class dbTest extends PHPUnit_Framework_TestCase {

	public static function setUpBeforeClass () {
        db::$dsn  = 'mysql:host=127.0.0.1;dbname=fortnotes;charset=utf8';
		db::$user = 'fortnotes';
		db::$pass = 'a1zs2xd3c';
		db::$onfailure = function(){};
		db::$onsuccess = function($data){
			//print_r($data);
		};
    }

    public static function tearDownAfterClass () {}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp () {
		db::$sqlonly = false;
		db::$struct = null;
		// virtual table
		db::exec('create table phpunit (id int unsigned not null auto_increment, id_type smallint unsigned default 1, name varchar(200) not null default \'\', time int unsigned not null default 0, primary key (id), key idx_id_type (id_type) ) engine=memory default charset=utf8 comment=\'PHPUnit test table\'');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown () {
		db::$struct = null;
		db::exec('drop table if exists phpunit');
	}

	/**
	 * @covers db::begin
	 * @covers db::commit
	 * @covers db::rollback
	 */
	public function testBegin() {
//		$this->assertTrue(db::begin());
//		$this->assertTrue(1 === db::exec("insert into phpunit (id_type, name, time) values (2, 'tst', 4)"));
//		$this->assertTrue(1 === db::exec("insert into phpunit (id_type, name, time) values (2, 'tst', 4)"));
//		$this->assertTrue(db::commit());
//		$this->assertTrue(2 === count(db::query("select * from phpunit")));
//		$this->assertTrue(0 === count(db::query("select * from phpunit")));
//		$this->assertTrue(db::begin());
//		$this->assertTrue(1 === db::exec("insert into phpunit (id_type, name, time) values (2, 'tst', 4)"));
//		$this->assertTrue(1 === db::exec("insert into phpunit (id_type, name, time) values (2, 'tst', 4)"));
//		$this->assertTrue(db::rollback());
//		print_r(db::query("select * from phpunit"));
//		$this->assertTrue(0 === count(db::query("select * from phpunit")));
	}

	/**
	 * @covers db::affected
	 */
	public function testAffected() {
		$this->assertEquals(1, db::insert('phpunit',array('name'=>'str')));
		$this->assertEquals(1, db::affected());
		$this->assertEquals(2, db::insert('phpunit',array("\tname\n"=>'str2')));
		$this->assertEquals(1, db::affected());
		$this->assertEquals(2, db::insert('phpunit',array(array('name'=>'str1', 'time'=>48), array('name'=>'str2', 'time'=>49), 123, array('key'=>'tst', 'name'=>'str2'))));
		$this->assertEquals(2, db::affected());
		$this->assertEquals(2, db::insert('phpunit',array('', array('name'=>'str1'), array('name'=>'str2'))));
		$this->assertEquals(2, db::affected());
		$this->assertEquals(7, db::insert('phpunit',array(array('name'=>'str1'), 1, null, array())));
		$this->assertEquals(1, db::affected());
		$this->assertEquals(3, db::update('phpunit', array('name'=>'tst'), 'name = @s', 'str1'));
		$this->assertEquals(3, db::affected());
		$this->assertEquals(7, db::exec("delete from phpunit"));
		$this->assertEquals(7, db::affected());
	}

	/**
	 * @covers db::sql
	 */
	public function testSql() {
		$this->assertEquals("", db::sql(3,2,1)->scalar);
		$this->assertEquals("", db::sql(3,'str')->scalar);
		$this->assertEquals("", db::sql(3)->scalar);
		$this->assertEquals("", db::sql()->scalar);
		$this->assertEquals("", db::sql('      ',3)->scalar);
		$this->assertEquals("", db::sql('',3)->scalar);
		$this->assertEquals("str", db::sql(' str ')->scalar);
		$this->assertEquals("str", db::sql(' str ', 123)->scalar);
		$this->assertEquals("str", db::sql('str', 123, 'a', 'b')->scalar);
		$this->assertEquals("", db::sql('@s @i @li ', 'str', 1)->scalar);
		$this->assertEquals("", db::sql('  @s @li', 'str')->scalar);
		$this->assertEquals("", db::sql('  @s   ', 45, 'str', 12)->scalar);
		$this->assertEquals("'str'", db::sql(' @s ', 'str')->scalar);
		$this->assertEquals(65536, db::sql('@i ', 65536)->scalar);
		$this->assertEquals('\'s\"t\\\r\' and 128', db::sql('  @s and @i  ', 's"t\r', 128)->scalar);
		$this->assertEquals("[128] not ('str')", db::sql('[@i] not (@s)', 128, 'str')->scalar);
		$this->assertEquals("'~!@#$%^&*()_+-=`'", db::sql('@s', '~!@#$%^&*()_+-=`')->scalar);
		$this->assertEquals('\'!\";%:?*()_+-=<>,./?:;\"\\\'{}[]()|\\\\\'', db::sql('@s', '!";%:?*()_+-=<>,./?:;"\'{}[]()|\\')->scalar);
		$this->assertEquals('a in', db::sql('a in @li', array())->scalar);
		$this->assertEquals('a in (1,2,3)', db::sql('a in @li', array(1,2,3))->scalar);
		$this->assertEquals("a in  (1,0,3)  and 'str'", db::sql(' a in  @li  and @s ', array(1,'inv',3), 'str')->scalar);
		$this->assertEquals('a in (1)', db::sql('a in @li', array(1))->scalar);
		$this->assertEquals("a in ('a','b','c')", db::sql('a in @ls', array('a','b','c'))->scalar);
		$this->assertEquals("a in ('a','128','c')", db::sql('a in @ls', array('a',128,'c'))->scalar);
	}

	/**
	 * @covers db::query
	 */
	public function testQuery() {
		$this->assertTrue(false   === db::query('select * from test'));
		$this->assertTrue(array() === db::query('select * from phpunit'));
		$this->assertTrue(array() === db::query('select * from phpunit where time=@i',1));
	}

	/**
	 * @covers db::queryFirstRow
	 */
	public function testQueryFirstRow() {
		$this->assertEquals(5,  db::insert('phpunit', array(
			array('name'=>'str1', 'time'=>123),
			array('name'=>'str2', 'time'=>122),
			array('name'=>'str3', 'time'=>121),
			array('name'=>'str4', 'time'=>120),
			array('name'=>'str5', 'time'=>000),
		)));
		$this->assertFalse(db::queryFirstRow('select * from phpunit where time=@i',1));
		$this->assertFalse(db::queryFirstRow('select * from phpunit where test=@i',1));
		$this->assertFalse(db::queryFirstRow('select * from testtbl where time=@i',1));
		$this->assertTrue(($data = db::queryFirstRow('select * from phpunit')) && $data['name'] == 'str1');
		$this->assertTrue(($data = db::queryFirstRow('select * from phpunit where time=@i',0)) && $data['name'] == 'str5');
	}

	/**
	 * @covers db::queryFirstCol
	 */
	public function testQueryFirstCol() {
		$this->assertEquals(5,  db::insert('phpunit', array(
			array('name'=>'str1', 'time'=>123),
			array('name'=>'str2', 'time'=>122),
			array('name'=>'str3', 'time'=>121),
			array('name'=>'str4', 'time'=>120),
			array('name'=>'str5', 'time'=>000),
		)));
		$this->assertFalse(db::queryFirstCol('select * from phpunit where time=@i',1));
		$this->assertFalse(db::queryFirstCol('select * from phpunit where test=@i',1));
		$this->assertFalse(db::queryFirstCol('select * from testtbl where time=@i',1));
		$this->assertTrue(($data = db::queryFirstCol('select * from phpunit')) && count($data) == 5 && $data[0] == 1);
		$this->assertTrue(($data = db::queryFirstCol('select id from phpunit')) && count($data) == 5 && $data[0] == 1);
		$this->assertTrue(($data = db::queryFirstCol('select name,id from phpunit')) && count($data) == 5 && $data[0] == 'str1');
	}

	/**
	 * @covers db::exec
	 */
	public function testExec() {
		$this->assertTrue(1 === db::exec("insert into phpunit (id_type, name, time) values (2, 'tst', 4)"));
		$this->assertTrue(1 === db::exec("insert into phpunit (id_type, name, time) values (2, 'tst', 4)"));
		$this->assertTrue(2 === count(db::query("select * from phpunit")));
		$this->assertTrue(1 === db::exec("delete from phpunit where id_type = @i limit 1", 2));
		$this->assertTrue(1 === db::exec("delete from phpunit where name in @ls", array('tst', 'abc')));
		$this->assertTrue(0 === db::exec("delete from phpunit"));
	}

	/**
	 * @covers db::insert
	 */
	public function testInsert() {
		$struct = db::struct();
		db::$sqlonly = true;
		db::$struct  = null;
		$this->assertEquals(false, db::insert(null,null));
		$this->assertEquals(false, db::insert('phpunit',null));
		$this->assertEquals(false, db::insert('phpunit',array()));
		$this->assertEquals(false, db::insert('phpunit',array(null)));
		$this->assertEquals(false, db::insert('phpunit',array(1,2)));
		$this->assertEquals(false, db::insert('phpunit',array(''=>'str')));
		$this->assertEquals(false, db::insert('phpunit',array(' '=>'str')));
		$this->assertEquals(false, db::insert('phpunit',array(1, array(''=>''), array())));
		$this->assertEquals("insert into phpunit (str) values ('tst')", db::insert('phpunit',array(1, array('str'=>'tst'), array())));
		$this->assertEquals("insert into phpunit (str) values ('str')", db::insert('phpunit',array(' str '=>'str')));
		$this->assertEquals("insert into phpunit (str) values ('str')", db::insert('phpunit',array('tst', 'str'=>'str', 1)));
		$this->assertEquals("insert into phpunit (test, str) values (123, 'str')", db::insert('phpunit',array("\tstr\n"=>'str', 'test'=>123)));
		$this->assertEquals("insert into phpunit (str) values ('str1'), ('str2')", db::insert('phpunit',array(array('str'=>'str1'), array('str'=>'str2'))));
		$this->assertEquals("insert into phpunit (str) values ('str1')", db::insert('phpunit',array(array('str'=>'str1'), array())));
		$this->assertEquals("insert into phpunit (str) values ('str1')", db::insert('phpunit',array(array('str'=>'str1'), 1, null, array())));
		$this->assertEquals("insert into phpunit (str) values (now())",  db::insert('phpunit',array(array('str'=>db::sql('now()')), 1, null, array(null))));
		$this->assertEquals("insert into phpunit (str) values ('str1')", db::insert('phpunit',array(array('str'=>'str1'), 1, null, array('str'))));
		$this->assertEquals("insert into phpunit (str) values ('str1'), ('str2')", db::insert('phpunit',array(array(123, 'str'=>'str1'), array('str'=>'str2', 456))));
		$this->assertEquals("insert into phpunit (str, key) values ('str1', 'tst')", db::insert('phpunit',array(array('str'=>'str1', 'key'=>'tst'), array('str'=>'str2'))));
		$this->assertEquals("insert into phpunit (key, str) values ('tst', 'str1')", db::insert('phpunit',array(array('key'=>'tst', 'str'=>'str1'), array('str'=>'str2'))));
		$this->assertEquals("insert into phpunit (str) values ('str1')", db::insert('phpunit',array(array('str'=>'str1'), array('key'=>'tst', 'str'=>'str2'))));
		db::$struct = $struct;
		$this->assertEquals(false, db::insert('phpunit', array("\tstr\n"=>'str')));
		$this->assertEquals(false, db::insert('test', array('name '=>'str')));
		$this->assertEquals("insert into phpunit (name) values ('str')", db::insert('phpunit',array('name '=>'str')));
		$this->assertEquals("insert into phpunit (name) values ('str')", db::insert('phpunit',array('tst', ' name'=>'str', 1)));
		$this->assertEquals("insert into phpunit (name) values (12345)", db::insert('phpunit',array('str'=>'str', 'name'=>12345)));
		$this->assertEquals("insert into phpunit (name) values ('str1'), ('str2')", db::insert('phpunit',array('', array('name'=>'str1'), array('name'=>'str2'))));
		$this->assertEquals("insert into phpunit (name) values ('str1')", db::insert('phpunit',array(array('name'=>'str1'), array(), null)));
		$this->assertEquals("insert into phpunit (name) values ('str1')", db::insert('phpunit',array(array('name'=>'str1'), 1, null, array())));
		$this->assertEquals("insert into phpunit (name) values (now())",  db::insert('phpunit',array(array('name'=>db::sql('now()')), 1, null, array(null))));
		$this->assertEquals("insert into phpunit (name) values ('str1')", db::insert('phpunit',array(array('name'=>'str1'), 1, null, array('str'))));
		$this->assertEquals("insert into phpunit (name) values ('str1'), ('str2')", db::insert('phpunit',array(array(123, 'name'=>'str1'), array('name'=>'str2', 456))));
		$this->assertEquals("insert into phpunit (name) values ('str1'), ('str2')", db::insert('phpunit',array(array('name'=>'str1', 'key'=>'tst'), array('name'=>'str2'))));
		$this->assertEquals("insert into phpunit (name) values ('str2'), ('str4')", db::insert('phpunit',array(null, array('key'=>'tst', 'name'=>'str2'), array('name'=>'str4'))));
		$this->assertEquals("insert into phpunit (name) values ('str1'), ('str2')", db::insert('phpunit',array(array('name'=>'str1'), 123, array('key'=>'tst', 'name'=>'str2'))));
		$this->assertEquals("insert into phpunit (name, time) values ('str1', 48)", db::insert('phpunit',array(array('name'=>'str1', 'time'=>48), 123, array('key'=>'tst', 'name'=>'str2'))));
		db::$struct = null;
		db::$sqlonly = false;
		$this->assertEquals(false, db::insert('phpunit',array('str'=>'str')));
		$this->assertEquals(false, db::insert('phpunit',array(array('str'=>'str'))));
		$this->assertEquals(false, db::insert('phpunit',array(array('str'=>'str', 'name'=>'test'))));
		$this->assertEquals(false, db::insert('phpunit',array(array('str'=>'str'), array('name'=>'test'))));
		$this->assertEquals(false, db::insert('phpunit',array('str'=>'str', 'name'=>12345)));
		$this->assertEquals(false, db::insert('phpunit',array(array('name'=>'str1', 'key'=>'tst'), array('name'=>'str2'))));
		$this->assertEquals(false, db::insert('phpunit',array(null, array('key'=>'tst', 'name'=>'str2'), array('name'=>'str4'))));
		$this->assertEquals(1,  db::insert('phpunit',array('name'=>'str')));
		$this->assertEquals(2,  db::insert('phpunit',array("\tname\n"=>'str2')));
		$this->assertEquals(2,  db::insert('phpunit',array(array('name'=>'str1', 'time'=>48), array('name'=>'str2', 'time'=>49), 123, array('key'=>'tst', 'name'=>'str2'))));
		$this->assertEquals(5,  db::insert('phpunit',array('tst', ' name'=>'str', 1)));
		$this->assertEquals(2,  db::insert('phpunit',array('', array('name'=>'str1'), array('name'=>'str2'))));
		$this->assertEquals(8,  db::insert('phpunit',array(array('name'=>'str1'), array(), null)));
		$this->assertEquals(9,  db::insert('phpunit',array(array('name'=>'str1'), 1, null, array())));
		$this->assertEquals(10, db::insert('phpunit',array(array('name'=>db::sql('now()')), 1, null, array(null))));
		$this->assertEquals(11, db::insert('phpunit',array(array('name'=>'str1'), 1, null, array('str'))));
		$this->assertEquals(2,  db::insert('phpunit',array(array(123, 'name'=>'str1'), array('name'=>'str2', 456))));
		$this->assertEquals(14, db::insert('phpunit',array(array('name'=>'str1'), 123, array('key'=>'tst', 'name'=>'str2'))));
		$this->assertEquals(15, db::insert('phpunit',array(array('name'=>'str1', 'time'=>48), 123, array('key'=>'tst', 'name'=>'str2'))));
		$this->assertEquals(15, count(db::query("select * from phpunit")));
		db::$struct = $struct;
		$this->assertEquals(false, db::insert('phpunit',array('str'=>'str')));
		$this->assertEquals(false, db::insert('phpunit',array(array('str'=>'str'))));
		$this->assertEquals(16, db::insert('phpunit',array(array('str'=>'str', 'name'=>'test'))));
		$this->assertEquals(2,  db::insert('phpunit',array(null, array('key'=>'tst', 'name'=>'str2'), array('name'=>'str4'))));
		$this->assertEquals(19, db::insert('phpunit',array(null, array('key'=>'tst', 'name'=>'str2'), array('time'=>4))));
		$this->assertEquals(2,  db::insert('phpunit',array(array('name'=>'str1', 'key'=>'tst'), array('name'=>'str2'))));
		$this->assertEquals(22, db::insert('phpunit',array('str'=>'str', 'name'=>12345)));
		$this->assertEquals(23, db::insert('phpunit',array(array('str'=>'str'), array('name'=>'test'))));
		$this->assertEquals(24, db::insert('phpunit',array('name'=>'str')));
		$this->assertEquals(25, db::insert('phpunit',array("\tname\n"=>'str2')));
		$this->assertEquals(2,  db::insert('phpunit',array(array('name'=>'str1', 'time'=>48), array('name'=>'str2', 'time'=>49), 123, array('key'=>'tst', 'name'=>'str2'))));
		$this->assertEquals(28, db::insert('phpunit',array('tst', ' name'=>'str', 1)));
		$this->assertEquals(2,  db::insert('phpunit',array('', array('name'=>'str1'), array('name'=>'str2'))));
		$this->assertEquals(31, db::insert('phpunit',array(array('name'=>'str1'), array(), null)));
		$this->assertEquals(32, db::insert('phpunit',array(array('name'=>'str1'), 1, null, array())));
		$this->assertEquals(33, db::insert('phpunit',array(array('time'=>db::sql('now()')), 1, null, array(null))));
		$this->assertEquals(34, db::insert('phpunit',array(array('name'=>'str1'), 1, null, array('str'))));
		$this->assertEquals(2,  db::insert('phpunit',array(array(123, 'name'=>'str1'), array('name'=>'str2', 456))));
		$this->assertEquals(2,  db::insert('phpunit',array(array('name'=>'str1'), 123, array('key'=>'tst', 'name'=>'str2'))));
		$this->assertEquals(39, db::insert('phpunit',array(array('name'=>'str1', 'time'=>48), 123, array('key'=>'tst', 'name'=>'str2'))));
		$this->assertEquals(39, count(db::query("select * from phpunit")));
	}

	/**
	 * @covers db::update
	 */
	public function testUpdate() {
		$struct = db::struct();
		db::$sqlonly = true;
		db::$struct  = null;
		$this->assertEquals(false, db::update());
		$this->assertEquals(false, db::update(null));
		$this->assertEquals(false, db::update(null, null));
		$this->assertEquals(false, db::update('phpunit'));
		$this->assertEquals(false, db::update('phpunit', 123));
		$this->assertEquals(false, db::update('phpunit', 123, 'str'));
		$this->assertEquals(false, db::update('phpunit', array()));
		$this->assertEquals(false, db::update('phpunit', array(), ''));
		$this->assertEquals(false, db::update('phpunit', array(), 123));
		$this->assertEquals(false, db::update('phpunit', array(), 123, ''));
		$this->assertEquals(false, db::update('phpunit', array(123)));
		$this->assertEquals("update phpunit set name = 123", db::update('phpunit', array('name'=>123)));
		$this->assertEquals("update phpunit set name = 123, test = 123", db::update('phpunit', array('name'=>123, 'test'=>123)));
		$this->assertEquals("update phpunit set name = null", db::update('phpunit', array('name'=>null)));
		$this->assertEquals("update phpunit set name = 's\\\"t\'r'", db::update('phpunit', array('name'=>'s"t\'r')));
		$this->assertEquals("update phpunit set time = now() where id = 0", db::update('phpunit', array('time'=>db::sql('now()')), 'id = 0'));
		$this->assertEquals("update phpunit set time = now() where", db::update('phpunit', array('time'=>db::sql('now()')), ''));
		$this->assertEquals("update phpunit set name = null where id = 0", db::update('phpunit', array('name'=>null), 'id = 0'));
		$this->assertEquals("update phpunit set name = 0 where id = 0", db::update('phpunit', array('name'=>false), 'id = @i', 0));
		$this->assertEquals("update phpunit set name = null where id in (1,2,3)", db::update('phpunit', array('name'=>null), 'id in @li', array(1,2,3)));
		$this->assertEquals("update phpunit set name = null, time = 1024 where id in", db::update('phpunit', array('name'=>null, 'time'=>1024), 'id in @li', array()));
		$this->assertEquals("update phpunit set name = 'str', time = 1 where id in (1,2,3)", db::update('phpunit', array('name'=>'str', 'time'=>true), 'id in @li', array(1,2,3)));
		db::$struct = $struct;
		$this->assertEquals(false, db::update());
		$this->assertEquals(false, db::update(null));
		$this->assertEquals(false, db::update(null, null));
		$this->assertEquals(false, db::update('phpunit'));
		$this->assertEquals(false, db::update('phpunit', 123));
		$this->assertEquals(false, db::update('phpunit', 123, 'str'));
		$this->assertEquals(false, db::update('phpunit', array()));
		$this->assertEquals(false, db::update('phpunit', array(), ''));
		$this->assertEquals(false, db::update('phpunit', array(), 123));
		$this->assertEquals(false, db::update('phpunit', array(), 123, ''));
		$this->assertEquals(false, db::update('phpunit', array(123)));
		$this->assertEquals(false, db::update('test', array('name'=>null)));
		$this->assertEquals("update phpunit set name = 123", db::update('phpunit', array('name'=>123)));
		$this->assertEquals("update phpunit set name = 123", db::update('phpunit', array('name'=>123, 'test'=>123)));
		$this->assertEquals("update phpunit set name = 's\\\"t\'r'", db::update('phpunit', array('name'=>'s"t\'r')));
		$this->assertEquals("update phpunit set time = now() where id = 0", db::update('phpunit', array('time'=>db::sql('now()')), 'id = 0'));
		$this->assertEquals("update phpunit set time = now() where", db::update('phpunit', array('time'=>db::sql('now()')), ''));
		$this->assertEquals("update phpunit set name = null where id = 0", db::update('phpunit', array('name'=>null), 'id = 0'));
		$this->assertEquals("update phpunit set name = 0 where id = 0", db::update('phpunit', array('name'=>false), 'id = @i', 0));
		$this->assertEquals("update phpunit set name = null where id in (1,2,3)", db::update('phpunit', array('name'=>null), 'id in @li', array(1,2,3)));
		$this->assertEquals("update phpunit set name = null, time = 1024 where id in", db::update('phpunit', array('name'=>null, 'time'=>1024), 'id in @li', array()));
		$this->assertEquals("update phpunit set name = 'str', time = 1 where id in (1,2,3)", db::update('phpunit', array('name'=>'str', 'time'=>true), 'id in @li', array(1,2,3)));
		db::$sqlonly = false;
		$this->assertTrue(3 === db::exec("insert into phpunit (id_type, name, time) values (1, 'str', 2),(1, 'str', 3),(2, 'str', 3)"));
		$this->assertEquals('3', db::update('phpunit', array('name'=>'tst')));
		$this->assertTrue(0 === db::update('phpunit', array('name'=>'tst')));
		$this->assertTrue(2 === db::update('phpunit', array('name'=>'str'), 'id_type = @i', 1));
		$this->assertTrue(3 === db::update('phpunit', array('name'=>'all'), 'id_type in @li', array(1,2)));
		$this->assertTrue(3 === db::update('phpunit', array('name'=>'new'), 'name = @s', 'all'));
		$this->assertTrue(is_array(db::$struct = db::struct()));
		$this->assertEquals(false, db::update('-false-', array('name'=>123)));
		$this->assertEquals(3, db::update('phpunit', array('name'=>123, 'test'=>123)));
		db::$struct = null;
	}

	/**
	 * @covers db::delete
	 */
	public function testDelete() {
		$struct = db::struct();
		db::$sqlonly = true;
		db::$struct  = null;
		$this->assertEquals("delete from phpunit", db::delete('phpunit'));
		$this->assertEquals("delete from phpunit where name='str'", db::delete('phpunit', 'name=@s', 'str'));
		$this->assertEquals("delete from phpunit where name=@s", db::delete('phpunit', 'name=@s'));
		$this->assertEquals("delete from phpunit where time=123", db::delete('phpunit', 'time=123'));
		$this->assertEquals("delete from phpunit where time=123", db::delete('phpunit', 'time=123', 128));
		$this->assertEquals("delete from test where id=512", db::delete('test', 'id=512'));
		$this->assertEquals("delete from test where", db::delete('test', 'id=@i and name=@s', 512));
		db::$struct = $struct;
		$this->assertEquals(false, db::delete('test', 'id=512'));
		$this->assertEquals(false, db::delete('test', 'id=@i and name=@s', 512));
		$this->assertEquals("delete from phpunit", db::delete('phpunit'));
		$this->assertEquals("delete from phpunit where time=123", db::delete('phpunit', 'time=123', 128));
		db::$struct = null;
		db::$sqlonly = false;
		$this->assertEquals(2, db::insert('phpunit',array(array('name'=>'str1', 'time'=>48), array('name'=>'str4', 'time'=>49), 123, array('key'=>'tst', 'name'=>'str2'))));
		$this->assertEquals(2, db::insert('phpunit',array('', array('name'=>'str2'), array('name'=>'str2'))));
		$this->assertEquals(2, db::insert('phpunit',array('', array('name'=>'str8'), array('name'=>'str9'))));
		$this->assertEquals(6, count(db::query("select * from phpunit")));
		$this->assertEquals(0, db::delete('phpunit', 'name=@s', 'str'));
		$this->assertEquals(1, db::delete('phpunit', 'name=@s', 'str1'));
		$this->assertEquals(2, db::delete('phpunit', 'name=@s', 'str2'));
		$this->assertEquals(3, db::delete('phpunit'));
		$this->assertEquals(false, db::delete('phpunit', 'test=@s', 'str2'));
		$this->assertEquals(false, db::delete('test'));
		db::$struct = $struct;
		$this->assertEquals(2, db::insert('phpunit',array(array('name'=>'str1', 'time'=>48), array('name'=>'str4', 'time'=>49), 123, array('key'=>'tst', 'name'=>'str2'))));
		$this->assertEquals(2, db::insert('phpunit',array('', array('name'=>'str2'), array('name'=>'str2'))));
		$this->assertEquals(2, db::insert('phpunit',array('', array('name'=>'str8'), array('name'=>'str9'))));
		$this->assertEquals(6, count(db::query("select * from phpunit")));
		$this->assertEquals(0, db::delete('phpunit', 'name=@s', 'str'));
		$this->assertEquals(1, db::delete('phpunit', 'name=@s', 'str1'));
		$this->assertEquals(2, db::delete('phpunit', 'name=@s', 'str2'));
		$this->assertEquals(3, db::delete('phpunit'));
		$this->assertEquals(false, db::delete('phpunit', 'test=@s', 'str2'));
		$this->assertEquals(false, db::delete('test'));
	}

	/**
	 * @covers db::struct
	 */
	public function testStruct() {
		$struct = db::struct();
		$this->assertTrue(is_array($struct));
		$this->assertTrue(count($struct) > 0);
		$this->assertTrue(count(current($struct)) > 0);
	}

}
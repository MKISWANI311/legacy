{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/app.js","webpack:///./src/js/api.js","webpack:///./src/js/sjcl.min.js","webpack:///./src/js/tag.manager.js","webpack:///./src/js/note.list.js","webpack:///./src/js/data.templates.js","webpack:///./src/js/template.list.js","webpack:///./src/js/main.js","webpack:///./src/js/note.filter.js","webpack:///./src/js/note.editor.js","webpack:///./src/js/data.entry.types.js","webpack:///./src/js/tools.js","webpack:///./src/js/dialogs.js","webpack:///./src/js/modal.js","webpack:///./src/js/fldlist.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","sjcl","app","self","this","data","pass","hash","params","ks","ts","cipher","subscribers","RequestPass","cacheEnc","cacheDec","set","persistent","localStorage","setItem","ifnull","getItem","calcHash","codec","hex","fromBits","sha256","hasHash","hasPass","checkPass","setPassHash","setPass","EventOpen","Function","expirePass","EventClose","encode","cache","enc","encrypt","e","decode","dec","decrypt","subscribe","component","push","defaults","server","credentials","headers","Accept","Content-Type","status","response","Promise","resolve","reject","Error","statusText","json","uri","callback","fetch","then","catch","post","assign","method","body","JSON","stringify","postForm","config","misc","exception","corrupt","a","toString","message","invalid","bug","aes","h","w","b","f","g","length","slice","H","k","j","q","bitArray","bitSlice","P","undefined","clamp","concat","getPartial","bitLength","Math","ceil","partial","round","equal","pop","utf8String","String","fromCharCode","decodeURIComponent","escape","toBits","unescape","encodeURIComponent","charCodeAt","substr","replace","parseInt","base64","D","charAt","indexOf","reset","update","finalize","blockSize","N","C","splice","floor","pow","ccm","G","I","tag","ocb2","A","pmac","hmac","M","mac","pbkdf2","random","randomWords","isReady","notready","U","L","u","setDefaultParanoia","addEntropy","Date","valueOf","F","R","J","K","max","getProgress","B","O","startCollectors","window","addEventListener","document","attachEvent","stopCollectors","removeEventListener","detachEvent","Q","z","progress","seeded","T","x","clientX","offsetX","y","clientY","offsetY","v","iter","adata","iv","salt","cachedPbkdf2","ct","V","match","split","W","S","firstSalt","TagManager","open","dataNmlist","dataIdlist","Add","id","SortByUses","result","uses","defn","sort","IDs2Names","prefix","Array","isNaN","IDs2Str","join","Names2IDs","skip_new","words","has","Str2IDs","Str2Names","forEach","word","StrParse","tinc","texc","ninc","nexc","winc","wexc","wcmd","fchar","fexc","fcmd","tid","StrBuild","list","item","Linked","links","link","Init","tags","api","templates","NoteList","TagClickHandler","event","ctrlKey","NoteFilter","TagSubtract","tagnm","finc","TagInclude","TagExclude","UpdateCtrlBlock","ctrlonly","visible","GetNotesVisible","elchild","elclear","dom","tpinfo","element","className","title","total","notes","onclick","NotesRequest","SetNotesState","checked","GetNotesByState","btndelete","style","display","btnrestore","tpbar","ClearNotesState","childNodes","state","active","marked","type","note","classList","toggle","GetNoteByID","NoteClickHandler","alast","fsame","has_changes","NoteEditor","HasChanges","ConfirmExit","GetNoteID","Load","shiftKey","cflag","NoteTickClickHandler","BuildNote","exc","inc","icon","fulltext","url","src","some","template","tick","info","entries","entry","toLowerCase","id_type","sname","sdata","search","target","href","onload","parent","parentNode","removeChild","SetNotesVisibility","hlist","BuildTable","neid","BtnDeleteHandler","confirm","undo","ids","error","MsgClear","MsgAdd","count","RequestDeleted","Escape","handle","tpctrl","description","TemplateList","hint_main","Fill","Show","Create","hint","innerHTML","collectTimer","Logout","location","reload","initData","user","dataUser","querySelector","pageMain","exportData","getElementById","setInterval","clearInterval","DlgPassGet","escClose","DlgUserLogin","hint_wexclude","messages","text","SetFocus","input","focus","RequestLatest","Reset","UpdateParsedInput","isall","all","trim","oldval","DoSearch","ctrl","history","histpos","PerformSearch","WordExclude","tagid","tinci","ninci","wind","home","placeholder","encval","$","autocomplete","matchInside","selectFirst","useDelimiter","delimiterChar","delimiterKeyCode","minChars","autoWidth","delay","showResult","processData","lnids","tnm","ac","keyCode","active_","activate","entryTypes","changed","hint_save","TagsChanged","Save","EnableControls","deleted","name_dec","data_dec","GetData","remove","added","setTimeout","child","SetTitleIcon","ProceedUrlIcon","query","results","EntryBlockControls","btn_config","table","onmouseout","desc","cell","onmouseover","entry_new","EntryCreate","onchange","insertBefore","EntryBtnConfig","btn_history","tbl","tblrow","btn_add","pwdgen","add","btn_up","previousSibling","btn_down","nextSibling","btn_delete","buttons","btn_pwdgen","btn_maskpwd","controls","limit","maxLength","selectionStart","onkeyup","counter","onkeydown","EntryBlockInput","bcontrols","disabled","Clone","New","Build","noswitch","width","height","ctime","TimestampToDateStr","mtime","BlockEntries","BlockTags","tcontrols","flag","onsave","oncancel","onEnterClick","dest","click","obj","nodeType","appendChild","createTextNode","hasChildNodes","firstChild","elattr","attr","akey","handlers","createElement","handler","rows","cols","el","insertRow","insertCell","cells","attrs","row","tstamp","theDate","nyear","getFullYear","nmonth","getMonth","nday","getDate","hour","getHours","min","getMinutes","letter","charset","letters","DialogModal","FieldList","DlgExport","DlgOptions","DlgUserRegister","onCreate","SetContent","idNote","note_tags","idTag","Close","main","onClick","modal","file","fbtn","btn","FormData","append","files","alert","attempts","fldlist","linkset","AddRow","onShow","Log off","Continue","SetMessage","serv","Register","Login","username","password","SetLoading","cimg","SetHint","pass1","pass2","code","footer","container","top","Cancel","SetWidth","close","SetTitle","content","cname","cdata","SetCols","AddDivider","colspan"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/**\n * Main application object\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar sjcl = require('./sjcl.min');\n\n\nvar app = new function () {\n    /* @var for limited scopes */\n    var self = this;\n\n    /* @var list of vars */\n    this.data = {};\n\n    /* @var private primary password (accessed only indirectly) */\n    var pass = null;\n\n    /* @var hash of the given pass (if not set then the pass was not created) */\n    var hash = null;\n\n    /* @var time in seconds for pass caching (default 5 mins) */\n    //var time = 300;\n\n    /* @var encode/decode default configuration */\n    var params = {ks: 256, ts: 128, mode: 'ccm', cipher: 'aes'};\n\n    /* @var list of encryption core subsribers to be notified on open/close events */\n    this.subscribers = [];\n\n    /** ??????????\n     * Callback function for primary password request\n     * should be set on application level\n     */\n    this.RequestPass = null;\n\n    // lists for cached enc/dec values\n    // to prevent unnecessary encryption/decryption\n    // filling optionally and clearing on master password expiration\n    var cacheEnc = {};  // \"plain_text\":'***encoded string***' list\n    var cacheDec = {};  // '***encoded string***':\"plain_text\" list\n\n\n    /**\n     * Set global variable\n     * @param name the name of value to store\n     * @param value the variable value\n     * @param persistent flag to store in the local storage permanently\n     */\n    this.set = function ( name, value, persistent ) {\n        if ( persistent ) {\n            localStorage.setItem(name, value);\n        } else {\n            this.data[name] = value;\n        }\n    };\n\n\n    /**\n     * Get global variable\n     * @param name the name of value to retrive\n     * @param ifnull default value if variable is not set\n     */\n    this.get = function ( name, ifnull ) {\n        return this.data[name] || localStorage.getItem(name) || ifnull;\n    };\n\n\n    /**\n     * Calculate the hash from given value\n     * algorithm: sha256\n     */\n    this.calcHash = function ( value ) {\n        return sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(value));\n    };\n\n\n    /**\n     * Check if hash set\n     */\n    this.hasHash = function () {\n        return (hash != null && hash != '');\n    };\n\n\n    /**\n     * Check if pass set\n     */\n    this.hasPass = function () {\n        return (pass !== null && pass !== '');\n    };\n\n\n    /**\n     * Check if pass set and matches the hash\n     * @param value the master password to check\n     */\n    this.checkPass = function ( value ) {\n        // check input\n        if ( !this.hasHash() || !value ) {\n            return false;\n        }\n        // comparing\n        return (hash === this.calcHash(value));\n    };\n\n\n    /**\n     * Set the hash of private pass var\n     * @param value the master password hash value\n     */\n    this.setPassHash = function ( value ) {\n        // check input\n        if ( !value ) {\n            return false;\n        }\n\n        // set and return\n        return (hash = value);\n    };\n\n\n    /**\n     * Set the time to remember the password\n     * @param newtime the time in seconds for pass caching\n     */\n    // this.SetPassTime = function ( newtime ) {\n    //     // check input\n    //     newtime = parseInt(newtime, 10);\n    //     if ( !newtime || newtime == NaN || newtime <= 0 ) return false;\n    //     time = newtime;\n    //     return true;\n    // };\n\n\n    /**\n     * Set the private pass var and start timer for clearing it in some time\n     * @param value the master password to check\n     */\n    this.setPass = function ( value ) {\n        //console.log('SetPass', value);\n        // check input\n        if ( !value ) {\n            return false;\n        }\n        // set the private password\n        pass = value;\n        // calculate and set hash if necessary\n        if ( !this.hasHash() ) {\n            this.setPassHash(this.calcHash(value));\n        }\n        //console.log('pass will expire in', time);\n        // set clearing timer\n        //setTimeout(function(){self.expirePass()}, time * 1000);\n        // notify all the subscribers that we have the pass\n        for ( var i in this.subscribers ) {\n            if ( self.subscribers[i].EventOpen && self.subscribers[i].EventOpen instanceof Function ) {\n                // open the subscriber - decrypt all the data and show it\n                self.subscribers[i].EventOpen();\n            }\n        }\n\n        // return password hash value\n        return hash;\n    };\n\n\n    /**\n     *\n     */\n    this.expirePass = function () {\n        console.log('master password expire');\n        // notify all the subscribers about clearing\n        for ( var i in self.subscribers ) {\n            if ( typeof self.subscribers[i].EventClose === 'function' ) {\n                // close the subscriber - clear all the decrypted data\n                self.subscribers[i].EventClose();\n            }\n        }\n        // clear the master pass\n        pass = null;\n        // clear cache\n        cacheEnc = {};\n        cacheDec = {};\n        // ask for pass\n        if ( self.RequestPass && self.RequestPass instanceof Function ) {\n            self.RequestPass.call();\n        }\n    };\n\n\n    /**\n     * Encrypt the given text and pass the result to callback function\n     * @param data data for encryption\n     * @param cache optional bool flag\n     *\n     */\n    this.encode = function ( data, cache ) {\n        // password is present and not empty input\n        if ( pass && data !== false && data !== null ) {\n            // try to get from cache\n            if ( cache && cacheEnc[data] ) {\n                return cacheEnc[data];\n            }\n\n            // protected block\n            try {\n                var enc = sjcl.encrypt(pass, data, params);\n                // fill cache if necessary\n                if ( cache ) {\n                    cacheEnc[data] = enc;\n                    cacheDec[enc] = data;\n                }\n\n                return enc;\n            } catch ( e ) {\n                console.trace();\n                console.log('encrypt failure', e, data);\n            }\n        }\n\n        return false;\n    };\n\n    // this.encode = function ( text, callback ) {\n    //    // temporary pass storing not to loose in on timer clearing\n    //    var ptmp = pass;\n    //    // password is cached so do encryption immediately\n    //    if ( ptmp ) {\n    //        callback.call(this, sjcl.encrypt(ptmp, text, params));\n    //        return true;\n    //    } else {\n    //        // ask for password and then do encryption\n    //        if ( this.RequestPass && this.RequestPass instanceof Function ) {\n    //            this.RequestPass.call(this, function(){\n    //                // pass encryption to the callback\n    //                callback.call(this, sjcl.encrypt(pass, text, params));\n    //                return true;\n    //            });\n    //        }\n    //        return false;\n    //    }\n    // }\n\n    /**\n     * Decrypt the given text and pass the result to callback function\n     * @param data data to be decrypted\n     * @param cache optional bool flag\n     */\n    this.decode = function ( data, cache ) {\n        // password is present and not empty input\n        if ( pass && data ) {\n            // try to get from cache\n            if ( cache && cacheDec[data] ) {\n                return cacheDec[data];\n            }\n\n            // protected block\n            try {\n                var dec = sjcl.decrypt(pass, data);\n                // fill cache if necessary\n                if ( cache ) {\n                    cacheDec[data] = dec;\n                    cacheEnc[dec] = data;\n                }\n\n                return dec;\n            } catch ( e ) {\n                console.trace();\n                console.log('decrypt failure', e, data);\n            }\n        }\n\n        return false;\n    };\n\n\n    // this.decode = function ( text, callback ) {\n    //    // temporary pass storing not to loose in on timer clearing\n    //    var ptmp = pass;\n    //    // password is cached so do encryption immediately\n    //    if ( ptmp ) {\n    //        callback.call(this, sjcl.decrypt(ptmp, text));\n    //        return true;\n    //    } else {\n    //        // ask for password and then do encryption\n    //        if ( this.RequestPass && this.RequestPass instanceof Function ) {\n    //            this.RequestPass.call(this, function(){\n    //                // pass decryption to the callback\n    //                callback.call(this, sjcl.decrypt(pass, text));\n    //                return true;\n    //            });\n    //        }\n    //        return false;\n    //    }\n    // }\n\n    this.subscribe = function ( component ) {\n        this.subscribers.push(component);\n    };\n};\n\n\n// public\nmodule.exports = app;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar defaults = {\n    server: localStorage.getItem('server') || 'https://fortnotes.com/',\n    mode: 'cors',\n    credentials: 'include',\n    headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n    }\n};\n\n\nfunction status ( response ) {\n    if ( response.status >= 200 && response.status < 300 ) {\n        return Promise.resolve(response);\n    } else {\n        return Promise.reject(new Error(response.statusText));\n    }\n}\n\nfunction json ( response ) {\n    return response.json();\n}\n\n\n// public\nmodule.exports = {\n    defaults: defaults,\n\n    get: function ( uri, callback ) {\n        fetch(defaults.server + uri, defaults)\n            .then(status)\n            .then(json)\n            .then(function ( data ) {\n                callback(null, data);\n            })\n            .catch(callback);\n    },\n\n    post: function ( uri, data, callback ) {\n        fetch(defaults.server + uri, Object.assign({}, defaults, {method: 'post', body: JSON.stringify(data)}))\n            .then(status)\n            .then(json)\n            .then(function ( data ) {\n                callback(null, data);\n            })\n            .catch(callback);\n    },\n\n    postForm: function ( uri, data, callback ) {\n        var config = Object.assign({}, defaults, {\n            method: 'post', body: data, headers: {\n                Accept: 'application/json'\n            }\n        });\n\n        fetch(defaults.server + uri, config)\n            .then(status)\n            .then(json)\n            .then(function ( data ) {\n                callback(null, data);\n            })\n            .catch(callback);\n    }\n};\n","\"use strict\";var sjcl={cipher:{},hash:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return\"CORRUPT: \"+this.message};this.message=a},invalid:function(a){this.toString=function(){return\"INVALID: \"+this.message};this.message=a},bug:function(a){this.toString=function(){return\"BUG: \"+this.message};this.message=a}}};\nsjcl.cipher.aes=function(a){this.h[0][0][0]||this.w();var b,c,d,e,f=this.h[0][4],g=this.h[1];b=a.length;var h=1;if(b!==4&&b!==6&&b!==8)throw new sjcl.exception.invalid(\"invalid aes key size\");this.a=[d=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d[a-1];if(a%b===0||b===8&&a%b===4){c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255];if(a%b===0){c=c<<8^c>>>24^h<<24;h=h<<1^(h>>7)*283}}d[a]=d[a-b]^c}for(b=0;a;b++,a--){c=d[b&3?a:a-4];e[b]=a<=4||b<4?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^\ng[3][f[c&255]]}};\nsjcl.cipher.aes.prototype={encrypt:function(a){return this.H(a,0)},decrypt:function(a){return this.H(a,1)},h:[[[],[],[],[],[]],[[],[],[],[],[]]],w:function(){var a=this.h[0],b=this.h[1],c=a[4],d=b[4],e,f,g,h=[],i=[],k,j,l,m;for(e=0;e<0x100;e++)i[(h[e]=e<<1^(e>>7)*283)^e]=e;for(f=g=0;!c[f];f^=k||1,g=i[g]||1){l=g^g<<1^g<<2^g<<3^g<<4;l=l>>8^l&255^99;c[f]=l;d[l]=f;j=h[e=h[k=h[f]]];m=j*0x1010101^e*0x10001^k*0x101^f*0x1010100;j=h[l]*0x101^l*0x1010100;for(e=0;e<4;e++){a[e][f]=j=j<<24^j>>>8;b[e][l]=m=m<<24^m>>>8}}for(e=\n0;e<5;e++){a[e]=a[e].slice(0);b[e]=b[e].slice(0)}},H:function(a,b){if(a.length!==4)throw new sjcl.exception.invalid(\"invalid aes block size\");var c=this.a[b],d=a[0]^c[0],e=a[b?3:1]^c[1],f=a[2]^c[2];a=a[b?1:3]^c[3];var g,h,i,k=c.length/4-2,j,l=4,m=[0,0,0,0];g=this.h[b];var n=g[0],o=g[1],p=g[2],q=g[3],r=g[4];for(j=0;j<k;j++){g=n[d>>>24]^o[e>>16&255]^p[f>>8&255]^q[a&255]^c[l];h=n[e>>>24]^o[f>>16&255]^p[a>>8&255]^q[d&255]^c[l+1];i=n[f>>>24]^o[a>>16&255]^p[d>>8&255]^q[e&255]^c[l+2];a=n[a>>>24]^o[d>>16&\n255]^p[e>>8&255]^q[f&255]^c[l+3];l+=4;d=g;e=h;f=i}for(j=0;j<4;j++){m[b?3&-j:j]=r[d>>>24]<<24^r[e>>16&255]<<16^r[f>>8&255]<<8^r[a&255]^c[l++];g=d;d=e;e=f;f=a;a=g}return m}};\nsjcl.bitArray={bitSlice:function(a,b,c){a=sjcl.bitArray.P(a.slice(b/32),32-(b&31)).slice(1);return c===undefined?a:sjcl.bitArray.clamp(a,c-b)},concat:function(a,b){if(a.length===0||b.length===0)return a.concat(b);var c=a[a.length-1],d=sjcl.bitArray.getPartial(c);return d===32?a.concat(b):sjcl.bitArray.P(b,d,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;if(b===0)return 0;return(b-1)*32+sjcl.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(a.length*32<b)return a;a=a.slice(0,Math.ceil(b/\n32));var c=a.length;b&=31;if(c>0&&b)a[c-1]=sjcl.bitArray.partial(b,a[c-1]&2147483648>>b-1,1);return a},partial:function(a,b,c){if(a===32)return b;return(c?b|0:b<<32-a)+a*0x10000000000},getPartial:function(a){return Math.round(a/0x10000000000)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b))return false;var c=0,d;for(d=0;d<a.length;d++)c|=a[d]^b[d];return c===0},P:function(a,b,c,d){var e;e=0;if(d===undefined)d=[];for(;b>=32;b-=32){d.push(c);c=0}if(b===0)return d.concat(a);\nfor(e=0;e<a.length;e++){d.push(c|a[e]>>>b);c=a[e]<<32-b}e=a.length?a[a.length-1]:0;a=sjcl.bitArray.getPartial(e);d.push(sjcl.bitArray.partial(b+a&31,b+a>32?c:d.pop(),1));return d},k:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]}};\nsjcl.codec.utf8String={fromBits:function(a){var b=\"\",c=sjcl.bitArray.bitLength(a),d,e;for(d=0;d<c/8;d++){if((d&3)===0)e=a[d/4];b+=String.fromCharCode(e>>>24);e<<=8}return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d=0;for(c=0;c<a.length;c++){d=d<<8|a.charCodeAt(c);if((c&3)===3){b.push(d);d=0}}c&3&&b.push(sjcl.bitArray.partial(8*(c&3),d));return b}};\nsjcl.codec.hex={fromBits:function(a){var b=\"\",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d;a=a.replace(/\\s|0x/g,\"\");d=a.length;a+=\"00000000\";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl.bitArray.clamp(c,d*4)}};\nsjcl.codec.base64={D:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",fromBits:function(a,b){var c=\"\",d,e=0,f=sjcl.codec.base64.D,g=0,h=sjcl.bitArray.bitLength(a);for(d=0;c.length*6<h;){c+=f.charAt((g^a[d]>>>e)>>>26);if(e<6){g=a[d]<<6-e;e+=26;d++}else{g<<=6;e-=6}}for(;c.length&3&&!b;)c+=\"=\";return c},toBits:function(a){a=a.replace(/\\s|=/g,\"\");var b=[],c,d=0,e=sjcl.codec.base64.D,f=0,g;for(c=0;c<a.length;c++){g=e.indexOf(a.charAt(c));if(g<0)throw new sjcl.exception.invalid(\"this isn't base64!\");\nif(d>26){d-=26;b.push(f^g>>>d);f=g<<32-d}else{d+=6;f^=g<<32-d}}d&56&&b.push(sjcl.bitArray.partial(d&56,f,1));return b}};sjcl.hash.sha256=function(a){this.a[0]||this.w();if(a){this.n=a.n.slice(0);this.i=a.i.slice(0);this.e=a.e}else this.reset()};sjcl.hash.sha256.hash=function(a){return(new sjcl.hash.sha256).update(a).finalize()};\nsjcl.hash.sha256.prototype={blockSize:512,reset:function(){this.n=this.N.slice(0);this.i=[];this.e=0;return this},update:function(a){if(typeof a===\"string\")a=sjcl.codec.utf8String.toBits(a);var b,c=this.i=sjcl.bitArray.concat(this.i,a);b=this.e;a=this.e=b+sjcl.bitArray.bitLength(a);for(b=512+b&-512;b<=a;b+=512)this.C(c.splice(0,16));return this},finalize:function(){var a,b=this.i,c=this.n;b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.e/\n4294967296));for(b.push(this.e|0);b.length;)this.C(b.splice(0,16));this.reset();return c},N:[],a:[],w:function(){function a(e){return(e-Math.floor(e))*0x100000000|0}var b=0,c=2,d;a:for(;b<64;c++){for(d=2;d*d<=c;d++)if(c%d===0)continue a;if(b<8)this.N[b]=a(Math.pow(c,0.5));this.a[b]=a(Math.pow(c,1/3));b++}},C:function(a){var b,c,d=a.slice(0),e=this.n,f=this.a,g=e[0],h=e[1],i=e[2],k=e[3],j=e[4],l=e[5],m=e[6],n=e[7];for(a=0;a<64;a++){if(a<16)b=d[a];else{b=d[a+1&15];c=d[a+14&15];b=d[a&15]=(b>>>7^b>>>18^\nb>>>3^b<<25^b<<14)+(c>>>17^c>>>19^c>>>10^c<<15^c<<13)+d[a&15]+d[a+9&15]|0}b=b+n+(j>>>6^j>>>11^j>>>25^j<<26^j<<21^j<<7)+(m^j&(l^m))+f[a];n=m;m=l;l=j;j=k+b|0;k=i;i=h;h=g;g=b+(h&i^k&(h^i))+(h>>>2^h>>>13^h>>>22^h<<30^h<<19^h<<10)|0}e[0]=e[0]+g|0;e[1]=e[1]+h|0;e[2]=e[2]+i|0;e[3]=e[3]+k|0;e[4]=e[4]+j|0;e[5]=e[5]+l|0;e[6]=e[6]+m|0;e[7]=e[7]+n|0}};\nsjcl.mode.ccm={name:\"ccm\",encrypt:function(a,b,c,d,e){var f,g=b.slice(0),h=sjcl.bitArray,i=h.bitLength(c)/8,k=h.bitLength(g)/8;e=e||64;d=d||[];if(i<7)throw new sjcl.exception.invalid(\"ccm: iv must be at least 7 bytes\");for(f=2;f<4&&k>>>8*f;f++);if(f<15-i)f=15-i;c=h.clamp(c,8*(15-f));b=sjcl.mode.ccm.G(a,b,c,d,e,f);g=sjcl.mode.ccm.I(a,g,c,b,e,f);return h.concat(g.data,g.tag)},decrypt:function(a,b,c,d,e){e=e||64;d=d||[];var f=sjcl.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),i=f.clamp(b,h-e),k=f.bitSlice(b,\nh-e);h=(h-e)/8;if(g<7)throw new sjcl.exception.invalid(\"ccm: iv must be at least 7 bytes\");for(b=2;b<4&&h>>>8*b;b++);if(b<15-g)b=15-g;c=f.clamp(c,8*(15-b));i=sjcl.mode.ccm.I(a,i,c,k,e,b);a=sjcl.mode.ccm.G(a,i.data,c,d,e,b);if(!f.equal(i.tag,a))throw new sjcl.exception.corrupt(\"ccm: tag doesn't match\");return i.data},G:function(a,b,c,d,e,f){var g=[],h=sjcl.bitArray,i=h.k;e/=8;if(e%2||e<4||e>16)throw new sjcl.exception.invalid(\"ccm: invalid tag length\");if(d.length>0xffffffff||b.length>0xffffffff)throw new sjcl.exception.bug(\"ccm: can't deal with 4GiB or more data\");\nf=[h.partial(8,(d.length?64:0)|e-2<<2|f-1)];f=h.concat(f,c);f[3]|=h.bitLength(b)/8;f=a.encrypt(f);if(d.length){c=h.bitLength(d)/8;if(c<=65279)g=[h.partial(16,c)];else if(c<=0xffffffff)g=h.concat([h.partial(16,65534)],[c]);g=h.concat(g,d);for(d=0;d<g.length;d+=4)f=a.encrypt(i(f,g.slice(d,d+4)))}for(d=0;d<b.length;d+=4)f=a.encrypt(i(f,b.slice(d,d+4)));return h.clamp(f,e*8)},I:function(a,b,c,d,e,f){var g,h=sjcl.bitArray;g=h.k;var i=b.length,k=h.bitLength(b);c=h.concat([h.partial(8,f-1)],c).concat([0,\n0,0]).slice(0,4);d=h.bitSlice(g(d,a.encrypt(c)),0,e);if(!i)return{tag:d,data:[]};for(g=0;g<i;g+=4){c[3]++;e=a.encrypt(c);b[g]^=e[0];b[g+1]^=e[1];b[g+2]^=e[2];b[g+3]^=e[3]}return{tag:d,data:h.clamp(b,k)}}};\nsjcl.mode.ocb2={name:\"ocb2\",encrypt:function(a,b,c,d,e,f){if(sjcl.bitArray.bitLength(c)!==128)throw new sjcl.exception.invalid(\"ocb iv must be 128 bits\");var g,h=sjcl.mode.ocb2.A,i=sjcl.bitArray,k=i.k,j=[0,0,0,0];c=h(a.encrypt(c));var l,m=[];d=d||[];e=e||64;for(g=0;g+4<b.length;g+=4){l=b.slice(g,g+4);j=k(j,l);m=m.concat(k(c,a.encrypt(k(c,l))));c=h(c)}l=b.slice(g);b=i.bitLength(l);g=a.encrypt(k(c,[0,0,0,b]));l=i.clamp(k(l,g),b);j=k(j,k(l,g));j=a.encrypt(k(j,k(c,h(c))));if(d.length)j=k(j,f?d:sjcl.mode.ocb2.pmac(a,\nd));return m.concat(i.concat(l,i.clamp(j,e)))},decrypt:function(a,b,c,d,e,f){if(sjcl.bitArray.bitLength(c)!==128)throw new sjcl.exception.invalid(\"ocb iv must be 128 bits\");e=e||64;var g=sjcl.mode.ocb2.A,h=sjcl.bitArray,i=h.k,k=[0,0,0,0],j=g(a.encrypt(c)),l,m,n=sjcl.bitArray.bitLength(b)-e,o=[];d=d||[];for(c=0;c+4<n/32;c+=4){l=i(j,a.decrypt(i(j,b.slice(c,c+4))));k=i(k,l);o=o.concat(l);j=g(j)}m=n-c*32;l=a.encrypt(i(j,[0,0,0,m]));l=i(l,h.clamp(b.slice(c),m));k=i(k,l);k=a.encrypt(i(k,i(j,g(j))));if(d.length)k=\ni(k,f?d:sjcl.mode.ocb2.pmac(a,d));if(!h.equal(h.clamp(k,e),h.bitSlice(b,n)))throw new sjcl.exception.corrupt(\"ocb: tag doesn't match\");return o.concat(h.clamp(l,m))},pmac:function(a,b){var c,d=sjcl.mode.ocb2.A,e=sjcl.bitArray,f=e.k,g=[0,0,0,0],h=a.encrypt([0,0,0,0]);h=f(h,d(d(h)));for(c=0;c+4<b.length;c+=4){h=d(h);g=f(g,a.encrypt(f(h,b.slice(c,c+4))))}b=b.slice(c);if(e.bitLength(b)<128){h=f(h,d(h));b=e.concat(b,[2147483648|0])}g=f(g,b);return a.encrypt(f(d(f(h,d(h))),g))},A:function(a){return[a[0]<<\n1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^(a[0]>>>31)*135]}};sjcl.misc.hmac=function(a,b){this.M=b=b||sjcl.hash.sha256;var c=[[],[]],d=b.prototype.blockSize/32;this.l=[new b,new b];if(a.length>d)a=b.hash(a);for(b=0;b<d;b++){c[0][b]=a[b]^909522486;c[1][b]=a[b]^1549556828}this.l[0].update(c[0]);this.l[1].update(c[1])};sjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(a,b){a=(new this.M(this.l[0])).update(a,b).finalize();return(new this.M(this.l[1])).update(a).finalize()};\nsjcl.misc.pbkdf2=function(a,b,c,d,e){c=c||1E3;if(d<0||c<0)throw sjcl.exception.invalid(\"invalid params to pbkdf2\");if(typeof a===\"string\")a=sjcl.codec.utf8String.toBits(a);e=e||sjcl.misc.hmac;a=new e(a);var f,g,h,i,k=[],j=sjcl.bitArray;for(i=1;32*k.length<(d||1);i++){e=f=a.encrypt(j.concat(b,[i]));for(g=1;g<c;g++){f=a.encrypt(f);for(h=0;h<f.length;h++)e[h]^=f[h]}k=k.concat(e)}if(d)k=j.clamp(k,d);return k};\nsjcl.random={randomWords:function(a,b){var c=[];b=this.isReady(b);var d;if(b===0)throw new sjcl.exception.notready(\"generator isn't seeded\");else b&2&&this.U(!(b&1));for(b=0;b<a;b+=4){(b+1)%0x10000===0&&this.L();d=this.u();c.push(d[0],d[1],d[2],d[3])}this.L();return c.slice(0,a)},setDefaultParanoia:function(a){this.t=a},addEntropy:function(a,b,c){c=c||\"user\";var d,e,f=(new Date).valueOf(),g=this.q[c],h=this.isReady();d=this.F[c];if(d===undefined)d=this.F[c]=this.R++;if(g===undefined)g=this.q[c]=0;this.q[c]=\n(this.q[c]+1)%this.b.length;switch(typeof a){case \"number\":break;case \"object\":if(b===undefined)for(c=b=0;c<a.length;c++)for(e=a[c];e>0;){b++;e>>>=1}this.b[g].update([d,this.J++,2,b,f,a.length].concat(a));break;case \"string\":if(b===undefined)b=a.length;this.b[g].update([d,this.J++,3,b,f,a.length]);this.b[g].update(a);break;default:throw new sjcl.exception.bug(\"random: addEntropy only supports number, array or string\");}this.j[g]+=b;this.f+=b;if(h===0){this.isReady()!==0&&this.K(\"seeded\",Math.max(this.g,\nthis.f));this.K(\"progress\",this.getProgress())}},isReady:function(a){a=this.B[a!==undefined?a:this.t];return this.g&&this.g>=a?this.j[0]>80&&(new Date).valueOf()>this.O?3:1:this.f>=a?2:0},getProgress:function(a){a=this.B[a?a:this.t];return this.g>=a?1[\"0\"]:this.f>a?1[\"0\"]:this.f/a},startCollectors:function(){if(!this.m){if(window.addEventListener){window.addEventListener(\"load\",this.o,false);window.addEventListener(\"mousemove\",this.p,false)}else if(document.attachEvent){document.attachEvent(\"onload\",\nthis.o);document.attachEvent(\"onmousemove\",this.p)}else throw new sjcl.exception.bug(\"can't attach event\");this.m=true}},stopCollectors:function(){if(this.m){if(window.removeEventListener){window.removeEventListener(\"load\",this.o);window.removeEventListener(\"mousemove\",this.p)}else if(window.detachEvent){window.detachEvent(\"onload\",this.o);window.detachEvent(\"onmousemove\",this.p)}this.m=false}},addEventListener:function(a,b){this.r[a][this.Q++]=b},removeEventListener:function(a,b){var c;a=this.r[a];\nvar d=[];for(c in a)a.hasOwnProperty[c]&&a[c]===b&&d.push(c);for(b=0;b<d.length;b++){c=d[b];delete a[c]}},b:[new sjcl.hash.sha256],j:[0],z:0,q:{},J:0,F:{},R:0,g:0,f:0,O:0,a:[0,0,0,0,0,0,0,0],d:[0,0,0,0],s:undefined,t:6,m:false,r:{progress:{},seeded:{}},Q:0,B:[0,48,64,96,128,192,0x100,384,512,768,1024],u:function(){for(var a=0;a<4;a++){this.d[a]=this.d[a]+1|0;if(this.d[a])break}return this.s.encrypt(this.d)},L:function(){this.a=this.u().concat(this.u());this.s=new sjcl.cipher.aes(this.a)},T:function(a){this.a=\nsjcl.hash.sha256.hash(this.a.concat(a));this.s=new sjcl.cipher.aes(this.a);for(a=0;a<4;a++){this.d[a]=this.d[a]+1|0;if(this.d[a])break}},U:function(a){var b=[],c=0,d;this.O=b[0]=(new Date).valueOf()+3E4;for(d=0;d<16;d++)b.push(Math.random()*0x100000000|0);for(d=0;d<this.b.length;d++){b=b.concat(this.b[d].finalize());c+=this.j[d];this.j[d]=0;if(!a&&this.z&1<<d)break}if(this.z>=1<<this.b.length){this.b.push(new sjcl.hash.sha256);this.j.push(0)}this.f-=c;if(c>this.g)this.g=c;this.z++;this.T(b)},p:function(a){sjcl.random.addEntropy([a.x||\na.clientX||a.offsetX,a.y||a.clientY||a.offsetY],2,\"mouse\")},o:function(){sjcl.random.addEntropy(new Date,2,\"loadtime\")},K:function(a,b){var c;a=sjcl.random.r[a];var d=[];for(c in a)a.hasOwnProperty(c)&&d.push(a[c]);for(c=0;c<d.length;c++)d[c](b)}};\nsjcl.json={defaults:{v:1,iter:1E3,ks:128,ts:64,mode:\"ccm\",adata:\"\",cipher:\"aes\"},encrypt:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json,f=e.c({iv:sjcl.random.randomWords(4,0)},e.defaults);e.c(f,c);if(typeof f.salt===\"string\")f.salt=sjcl.codec.base64.toBits(f.salt);if(typeof f.iv===\"string\")f.iv=sjcl.codec.base64.toBits(f.iv);if(!sjcl.mode[f.mode]||!sjcl.cipher[f.cipher]||typeof a===\"string\"&&f.iter<=100||f.ts!==64&&f.ts!==96&&f.ts!==128||f.ks!==128&&f.ks!==192&&f.ks!==0x100||f.iv.length<2||f.iv.length>\n4)throw new sjcl.exception.invalid(\"json encrypt: invalid parameters\");if(typeof a===\"string\"){c=sjcl.misc.cachedPbkdf2(a,f);a=c.key.slice(0,f.ks/32);f.salt=c.salt}if(typeof b===\"string\")b=sjcl.codec.utf8String.toBits(b);c=new sjcl.cipher[f.cipher](a);e.c(d,f);d.key=a;f.ct=sjcl.mode[f.mode].encrypt(c,b,f.iv,f.adata,f.tag);return e.encode(e.V(f,e.defaults))},decrypt:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json;b=e.c(e.c(e.c({},e.defaults),e.decode(b)),c,true);if(typeof b.salt===\"string\")b.salt=\nsjcl.codec.base64.toBits(b.salt);if(typeof b.iv===\"string\")b.iv=sjcl.codec.base64.toBits(b.iv);if(!sjcl.mode[b.mode]||!sjcl.cipher[b.cipher]||typeof a===\"string\"&&b.iter<=100||b.ts!==64&&b.ts!==96&&b.ts!==128||b.ks!==128&&b.ks!==192&&b.ks!==0x100||!b.iv||b.iv.length<2||b.iv.length>4)throw new sjcl.exception.invalid(\"json decrypt: invalid parameters\");if(typeof a===\"string\"){c=sjcl.misc.cachedPbkdf2(a,b);a=c.key.slice(0,b.ks/32);b.salt=c.salt}c=new sjcl.cipher[b.cipher](a);c=sjcl.mode[b.mode].decrypt(c,\nb.ct,b.iv,b.adata,b.tag);e.c(d,b);d.key=a;return sjcl.codec.utf8String.fromBits(c)},encode:function(a){var b,c=\"{\",d=\"\";for(b in a)if(a.hasOwnProperty(b)){if(!b.match(/^[a-z0-9]+$/i))throw new sjcl.exception.invalid(\"json encode: invalid property name\");c+=d+b+\":\";d=\",\";switch(typeof a[b]){case \"number\":case \"boolean\":c+=a[b];break;case \"string\":c+='\"'+escape(a[b])+'\"';break;case \"object\":c+='\"'+sjcl.codec.base64.fromBits(a[b],1)+'\"';break;default:throw new sjcl.exception.bug(\"json encode: unsupported type\");\n}}return c+\"}\"},decode:function(a){a=a.replace(/\\s/g,\"\");if(!a.match(/^\\{.*\\}$/))throw new sjcl.exception.invalid(\"json decode: this isn't json!\");a=a.replace(/^\\{|\\}$/g,\"\").split(/,/);var b={},c,d;for(c=0;c<a.length;c++){if(!(d=a[c].match(/^([a-z][a-z0-9]*):(?:(\\d+)|\"([a-z0-9+\\/%*_.@=\\-]*)\")$/i)))throw new sjcl.exception.invalid(\"json decode: this isn't json!\");b[d[1]]=d[2]?parseInt(d[2],10):d[1].match(/^(ct|salt|iv)$/)?sjcl.codec.base64.toBits(d[3]):unescape(d[3])}return b},c:function(a,b,c){if(a===\nundefined)a={};if(b===undefined)return a;var d;for(d in b)if(b.hasOwnProperty(d)){if(c&&a[d]!==undefined&&a[d]!==b[d])throw new sjcl.exception.invalid(\"required parameter overridden\");a[d]=b[d]}return a},V:function(a,b){var c={},d;for(d in a)if(a.hasOwnProperty(d)&&a[d]!==b[d])c[d]=a[d];return c},W:function(a,b){var c={},d;for(d=0;d<b.length;d++)if(a[b[d]]!==undefined)c[b[d]]=a[b[d]];return c}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc.S={};\nsjcl.misc.cachedPbkdf2=function(a,b){var c=sjcl.misc.S,d;b=b||{};d=b.iter||1E3;c=c[a]=c[a]||{};d=c[d]=c[d]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl.random.randomWords(2,0)};c=b.salt===undefined?d.firstSalt:b.salt;d[c]=d[c]||sjcl.misc.pbkdf2(a,c,b.iter);return{key:d[c].slice(0),salt:c.slice(0)}};\n\n// public\nmodule.exports = sjcl;\n","/**\n * List of tags with managing\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar app = require('./app');\n\n\nvar TagManager = new function () {\n    // for limited scopes\n    var self = this;\n\n    // max length of each tag, will be truncated on exceed\n    var maxlength_tag = 100;\n\n    // component state flag\n    // true  - everything is decoded\n    // false - no plain data, everything is encrypted\n    this.open = false;\n\n    // decoded to these two lists\n    this.dataNmlist = {}; // {note:1, site:2, email:3}\n    this.dataIdlist = {}; // {1:note, 2:site, 3:email}\n    // they are filling on page loading and on note creation\n    // if there are some new tags\n\n\n    /**\n     * Open the subscriber\n     * master password is accessible\n     * decrypt all the data and show it\n     */\n    // this.EventOpen = function () {\n    //     console.time('TagManager: decrypt tags');\n    //     // decrypt tags\n    //     for ( var id in window.dataTags.data ) {\n    //         var name = app.decode(window.dataTags.data[id][window.dataTags.defn.name]);\n    //         // fill service lookup tables of tags by id and by name\n    //         window.dataTagsNmlist[name] = id = parseInt(id, 10);\n    //         window.dataTagsIdlist[id] = name;\n    //     }\n    //     console.timeEnd('TagManager: decrypt tags');\n    // };\n\n\n    /**\n     * Close the subscriber\n     * master password is expired and cleared\n     * clear all the decrypted data\n     */\n    // this.EventClose = function () {\n    //     // clear service lookup tables\n    //     window.dataTagsNmlist = {};\n    //     window.dataTagsIdlist = {};\n    // };\n\n\n    /**\n     * Adds new tag id and enc/dev values to the global lookup tables\n     * @param id of the new tag\n     * @param enc encrypted tag name value\n     * @param dec optional decrypted tag name value, decrypted from enc if omitted\n     */\n    this.Add = function ( id, enc, dec ) {\n        // decrypt name if necessary\n        dec = dec || app.decode(enc, true);\n        this.data[id] = [enc, [], 1];\n        this.dataNmlist[dec] = id;\n        this.dataIdlist[id] = dec;\n    };\n\n\n    /**\n     * Returns the sorted list of tag ids by usage\n     * first ids the most used\n     */\n    this.SortByUses = function () {\n        var result = [];\n        // prepare list of id/usage\n        for ( var id in this.data ) {\n            result.push({id: parseInt(id, 10), uses: this.data[id][this.defn.uses]});\n        }\n        // custom sort\n        result.sort(function ( a, b ) {\n            return b.uses - a.uses\n        });\n        // rework output, get rid of objects\n        for ( var i = 0; i < result.length; i++ ) {\n            result[i] = result[i].id;\n        }\n        return result;\n    };\n\n\n    /**\n     * Converts the array of tags ids to tags names\n     * @param data array of tags (integers or encrypted strings)\n     * @param prefix string to prepend to each tag name\n     * @return tags names array\n     * @example [1,2,'***encrypted string***',3] -> ['ftp','note','ssh','site']\n     */\n    this.IDs2Names = function ( data, prefix ) {\n        var name, result = [];\n        // check input\n        if ( data && data instanceof Array )\n        // get tag names from ids\n            for ( var i = 0; i < data.length; i++ ) {\n                // check type\n                if ( isNaN(data[i]) ) {\n                    // seems this is a real-time encrypted string\n                    if ( (name = app.decode(data[i], true)) !== false ) result.push((prefix ? prefix : '') + name);\n                } else {\n                    // seems normal tag id\n                    if ( this.dataIdlist[data[i]] )\n                    // tag found in the global list\n                        result.push((prefix ? prefix : '') + this.dataIdlist[data[i]]);\n                }\n            }\n        return result.sort();\n    };\n\n\n    /**\n     * Returns the string of tag names from the tags ids\n     * @example [1,2,3] -> \"note site ftp\"\n     */\n    this.IDs2Str = function ( data ) {\n        data = this.IDs2Names(data);\n        return data.length > 0 ? data.join(' ') : '';\n    };\n\n\n    /**\n     * Converts a tags names array to array of ids or encrypted strings\n     * @param data tags string\n     * @param skip_new optional flag to exclude all new not encrypted values\n     * @return array of tags (integers or encrypted strings)\n     * @example skip_new=true  ['ftp','note','ssh','site'] -> [1,2,3]\n     * @example skip_new=false ['ftp','note','ssh','site'] -> [1,2,'***encrypted string***',3]\n     */\n    this.Names2IDs = function ( data, skip_new ) {\n        var result = [];\n        // check input\n        if ( data && data instanceof Array ) {\n            // list of unique tag names\n            var words = [], enc = null;\n            // iterate words in the input string\n            for ( var i = 0; i < data.length; i++ ) {\n                // shorten too long lines\n                var name = data[i].slice(0, maxlength_tag);\n                // check if this word already processed\n                if ( !words.has(name) ) {\n                    if ( this.dataNmlist[name] ) {\n                        // tag found in the global data\n                        result.push(this.dataNmlist[name]);\n                    } else {\n                        // not found so encrypt and cache if not skipped\n                        if ( !skip_new && (enc = app.encode(name, true)) !== false ) {\n                            result.push(enc);\n                        }\n                    }\n                    // add word\n                    words.push(name);\n                }\n            }\n        }\n        return result;\n    };\n\n\n    /**\n     * Converts a tags string to array of ids or encrypted strings\n     * @param data tags string\n     * @param skip_new optional flag to exclude all new not encrypted values\n     * @return array of tags (integers or encrypted strings)\n     * @example skip_new=true  \"ftp note ssh site\" -> [1,2,3]\n     * @example skip_new=false \"ftp note ssh site\" -> [1,2,'***encrypted string***',3]\n     */\n    this.Str2IDs = function ( data, skip_new ) {\n        // do convert\n        return this.Names2IDs(this.Str2Names(data), skip_new);\n    };\n\n\n//    this.NamesMissed = function ( names, data ) {\n//        var result = [];\n//        // check input\n//        if ( data && data.match ) {\n//            // split to separate words\n//            data = data.match(/(\\S+)/g);\n//            if ( data && data instanceof Array ) {\n//                // iterate words in the input string\n//                for ( var i = 0; i < data.length; i++ ) {\n//                    if ( !names.has(data[i]) ) {\n//                        result.push(data[i]);\n//                    }\n//                }\n//            }\n//        }\n//        return result;\n//    };\n\n\n    /**\n     * Converts a string to array of words\n     * @param data input string\n     * @return array of words\n     * @example 'ftp -note :ssh !site' -> [\"ftp\",\"-note\",\":ssh\",\"!site\"]\n     * @example 'ftp \"my note\" :ssh' -> [\"ftp\",\"my note\",\":ssh\"]\n     */\n    this.Str2Names = function ( data ) {\n        var result = [];\n        // check input\n        if ( data && data.match ) {\n            // split to words\n            //data = data.match(/(?:\"[^\"]+\"|[\\S]+)/g);\n            data = data.match(/(\\S+)/g);\n            // not empty list of words\n            if ( data && data instanceof Array ) {\n                // iterate words in the input string\n                data.forEach(function ( word ) {\n                    // prevent duplication\n                    if ( !result.has(word) ) result.push(word);\n                });\n            }\n        }\n        return result;\n    };\n\n\n    /**\n     * Parses the user input into inner data lists\n     * @param data string of tags input\n     * @return hash of lists\n     */\n    this.StrParse = function ( data ) {\n        var tinc = [],  // array of included tags ids\n            texc = [],  // array of excluded tags ids\n            ninc = [],  // array of included tags names\n            nexc = [],  // array of excluded tags names\n            winc = [],  // array of included words (not tags)\n            wexc = [],  // array of excluded words (not tags)\n            wcmd = [];  // array of command words\n        // prepare sorted list of words and iterate\n        this.Str2Names(data).sort().forEach(function ( word ) {\n            // find out if there are special chars at the beginning of the word\n            var fchar = word.charAt(0), fexc = (fchar === '-'), fcmd = (fchar === ':');\n            // get the word without special chars if present\n            if ( fexc || fcmd ) word = word.slice(1);\n            // not empty\n            if ( word ) {\n                // command\n                if ( fcmd ) {\n                    wcmd.push(word);\n                } else {\n                    // just a tag\n                    var tid = self.dataNmlist[word];\n                    // tag id found in the global data\n                    if ( tid ) {\n                        if ( fexc ) {\n                            // excluded\n                            texc.push(tid);\n                            nexc.push(word);\n                        } else {\n                            // included\n                            tinc.push(tid);\n                            ninc.push(word);\n                        }\n                    } else {\n                        // tag id not found so it's just a word\n                        if ( fexc )\n                            wexc.push(word);\n                        else\n                            winc.push(word);\n                    }\n                }\n            }\n        });\n        // build result struct\n        return {\n            tinc: tinc, texc: texc,\n            ninc: ninc, nexc: nexc,\n            winc: winc, wexc: wexc,\n            wcmd: wcmd\n        };\n    };\n\n\n    /**\n     * Build the user input string from the parsed inner data\n     * @param data hash of lists\n     * @return string of tags input\n     */\n    this.StrBuild = function ( data ) {\n        var list = [];\n        // check input and fill the list with the corresponding data\n        if ( data.wcmd && data.wcmd instanceof Array ) data.wcmd.sort().forEach(function ( item ) {\n            list.push(':' + item);\n        });\n        if ( data.ninc && data.ninc instanceof Array ) data.ninc.sort().forEach(function ( item ) {\n            list.push(item);\n        });\n        if ( data.nexc && data.nexc instanceof Array ) data.nexc.sort().forEach(function ( item ) {\n            list.push('-' + item);\n        });\n        if ( data.winc && data.winc instanceof Array ) data.winc.sort().forEach(function ( item ) {\n            list.push(item);\n        });\n        if ( data.wexc && data.wexc instanceof Array ) data.wexc.sort().forEach(function ( item ) {\n            list.push('-' + item);\n        });\n        // implode data into one line separated by spaces\n        return list.join(' ');\n    };\n\n\n    /**\n     * Splits the string with words into two lists - inc and exc\n     * @param data string with words\n     * @example data = \"table window -chair -door\" -> {winc:[\"table\",\"window\"],wexc:[\"chair\",\"door\"]}\n     */\n//    this.SeparateWords = function ( data ) {\n//        var list = [],  // array of all parts\n//            winc = [],  // array of included words (not tags)\n//            wexc = [];  // array of excluded words (not tags)\n//        // prepare list of words\n//        list = this.Str2Names(data);\n//        list.forEach(function(word){\n//            // find out if there is minus at the beginning of the word\n//            if ( word.charAt(0) === '-' ) {\n//                // get the word without minus\n//                word = word.slice(1);\n//                // append excluded\n//                if ( word ) wexc.push(word);\n//            } else {\n//                // append included\n//                if ( word ) winc.push(word);\n//            }\n//        });\n//        // build result struct\n//        return { winc:winc, wexc:wexc };\n//    }\n\n\n//    this.StrCombine = function ( data ) {\n//        var texc = [];\n//        data.texc.forEach(function(id){\n//            texc.push('-' + window.dataTagsIdlist[id]);\n//        });\n//        texc.sort();\n//        return texc.join(' ') + (texc.length > 0 ? ' ' : '') + this.IDs2Str(data.tinc);\n//    }\n\n\n    this.Linked = function ( data ) {\n        var result = [], list = {}, i;\n        //data = data.slice();\n        if ( data && data instanceof Array ) {\n            if ( data.length === 1 ) {\n                result = this.data[data[0]][this.defn.links];\n            } else {\n                data.forEach(function ( id ) {\n                    var links = self.data[id][self.defn.links];\n                    links.forEach(function ( link ) {\n                        list[link] = (list[link] ? list[link] : 0) + 1;\n                    });\n                });\n                for ( i in list ) {\n                    if ( list[i] === data.length ) {\n                        result.push(parseInt(i, 10));\n                    }\n                }\n                //fb(list);\n                //result = data[0].slice();\n                // iterate all rest\n                //            for ( var i = 1; i < data.length; i++ ) {\n                //                var links = window.dataTags.data[data[i]][window.dataTags.defn.links];\n                //\n                //            }\n                //                fb(id);\n                //                fb(window.dataTags.data[id][window.dataTags.defn.links].sort());\n                //});\n            }\n        }\n        //fb(result);\n        return result;\n    };\n\n\n    this.Init = function ( tags ) {\n        this.data = tags.data;\n        this.defn = tags.defn;\n\n        console.time('TagManager: decrypt tags');\n        // decrypt tags\n        for ( var id in this.data ) {\n            var name = app.decode(this.data[id][this.defn.name]);\n            // fill service lookup tables of tags by id and by name\n            this.dataNmlist[name] = id = parseInt(id, 10);\n            this.dataIdlist[id] = name;\n        }\n        console.timeEnd('TagManager: decrypt tags');\n    }\n\n};\n\n\n// public\nmodule.exports = TagManager;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar app = require('./app'),\n    api = require('./api'),\n    //NoteFilter = require('./app.note.filter'),\n    //NoteEditor = require('./app.note.editor'),\n    templates  = require('./data.templates'),\n    TagManager = require('./tag.manager');\n\n\n/**\n * Module to work with note list\n * view all, selecting, checking, appending, filtering\n */\nvar NoteList = new function () {\n    // for limited scopes\n    var self = this;\n\n    // component state flag\n    // true  - everything is decoded\n    // false - no plain data, everything is encrypted\n    //this.open = false;\n\n    var hint_tag_include = 'click on this tag to include it to the search';\n    var hint_tag_exclude = 'click on this tag to exclude it from the search';\n    var hint_info_missing = 'there is no data';\n    var hint_tags_missing = 'there are no tags';\n    var hint_notes_visible = 'the limited amount of visible notes received according the search options (usually the first 20)';\n    var hint_notes_total = 'the general amount of notes satisfying the giving search options';\n    var hint_notes_filtered = 'the amount of notes excluded from the note list due to the search filter';\n\n    var msg_checked_notes_remove = 'You are going to delete all checked notes in the note list. Do you really want to continue?';\n    var msg_checked_notes_restore = 'You are going to restore all checked notes in the note list. Do you really want to continue?';\n\n    var msg_checked_notes_removed = 'The selected notes were successfully removed ';\n    var msg_checked_notes_restored = 'The selected notes were successfully restored ';\n\n\n    /**\n     * Open the subscriber\n     * master password is accessible\n     * decrypt all the data and show it\n     */\n    // this.EventOpen = function () {\n    //     elclear(this.dom.notes);\n    //     // show info and controls\n    //     this.dom.tpbar.style.display = 'block';\n    //     // component state flag\n    //     this.open = true;\n    // };\n\n    /**\n     * Close the subscriber\n     * master password is expired and cleared\n     * clear all the decrypted data\n     */\n    // this.EventClose = function () {\n    //     // close only if opened at the moment\n    //     if ( this.open ) {\n    //         // clear decoded entries data in the requested notes\n    //         this.data.notes.forEach(function ( note ) {\n    //             // all note entries\n    //             note.entries.forEach(function ( entry ) {\n    //                 // remove if exist\n    //                 delete entry.name_dec;\n    //                 delete entry.data_dec;\n    //             });\n    //             // all data for filtering\n    //             delete note.fulltext;\n    //         });\n    //         // hide info and controls\n    //         this.dom.tpbar.style.display = 'none';\n    //         // clear notes\n    //         elclear(this.dom.notes);\n    //         // component state flag\n    //         this.open = false;\n    //     }\n    // };\n\n\n    /**\n     * Deletes or restores the given list of notes depending on the undo flag\n     * @param list array of note ids\n     * @param undo bool flag: true - restore notes, delete otherwise\n     */\n    var NotesDelete = function ( list, undo ) {\n        // check input\n        if ( list.length > 0 ) {\n            // send request\n            api.post('note/delete' + (undo ? '/undo' : ''), {ids: list}, function ( error, data ) {\n                if ( error ) {\n                    console.error(error);\n                }\n\n                console.log('note delete', data);\n\n                // remove old messages\n                NoteFilter.MsgClear();\n                // on success\n                if ( !data.error ) {\n                    // prepare message body\n                    var message = [(undo ? msg_checked_notes_restored : msg_checked_notes_removed) + '(amount:' + data.count + '). '];\n                    // after deletion allow to go to the deleted notes\n                    if ( !undo ) message.push(' It is still possible to ', element('a', {className: 'bold'}, 'restore them', {\n                        onclick: function () {\n                            NoteFilter.RequestDeleted();\n                        }\n                    }));\n                    // close currently edited note if affected\n                    if ( list.has(NoteEditor.GetNoteID()) ) NoteEditor.Escape();\n                    // show status message\n                    NoteFilter.MsgAdd(message);\n                    // refresh note list\n                    NoteFilter.NotesRequest();\n                } else {\n                    NoteFilter.MsgAdd('The request was not successful. The response from the server: ' + data.error, 'error');\n                }\n            });\n        }\n    };\n\n\n    /**\n     * Makes a visualization of the given note entries details\n     * @param note array note attributes\n     * @param icon img node for note icon\n     * @return array of html nodes or hint string\n     */\n    var BuildNoteInfo = function ( note, icon ) {\n        var list = [], fulltext = [], url = null;\n        // iterate all note entries\n        note.entries.forEach(function ( entry ) {\n            // decrypt data\n            var name = app.decode(entry.name);\n            var data = app.decode(entry.data);\n            // prepare fulltext data\n            fulltext.push(name.toLowerCase());\n            fulltext.push(data.toLowerCase());\n            // there is data and it's not a password\n            if ( entry.id_type !== 4 && data ) {\n                // truncate\n                var sname = name.length > 30 ? name.slice(0, 25) + '...' : name;\n                var sdata = data.length > 50 ? data.slice(0, 35) + '...' : data;\n                // url\n                if ( entry.id_type === 2 ) {\n                    // http/https/ftp and have point\n                    if ( (data.search('http://') >= 0 || data.search('https://') >= 0 || data.search('ftp://') >= 0) && data.search('.') >= 0 ) {\n                        sdata = element('a', {target: '_blank', href: data}, sdata);\n                        // the first available url\n                        if ( !url ) url = data;\n                    } else {\n                        // just server name\n                        sdata = element('b', {}, sdata);\n                    }\n                }\n                list.push(element('span', {className: 'name'}, sname + ':'));\n                list.push(element('span', {className: 'data'}, sdata));\n            }\n        });\n        // has valid url (the first one)\n        if ( url ) {\n            // get rid of all unnecessary parts\n            url = url.split('/');\n            // parts are valid\n            if ( url[2] && url[2] !== 'localhost' ) {\n                // try to get image, won't replace the current one if no icon found\n                // https://www.google.com/s2/favicons?domain=google.com gives only 16px images\n                //element('img', {className: 'icon', src: 'https://favicons.githubusercontent.com/' + url[2]}, null, {\n                element('img', {className: 'icon', src: 'http://www.getfavicon.org/get.pl?url=' + url[2]}, null, {\n                    onload: function () {\n                        // icon loaded so get current icon parent\n                        var parent = icon.parentNode;\n                        // and replace the current one\n                        parent.removeChild(icon);\n                        // with new\n                        elchild(parent, this);\n                        //self.dom.entries.insertBefore(entry, entry.previousSibling);\n                    }\n                })\n            }\n        }\n        // build search full text data\n        note.fulltext = fulltext.join('\\n');\n        // warning if no data\n        return list.length > 0 ? list : element('div', {className: 'warn'}, hint_info_missing);\n    }\n\n\n    /**\n     * Tag button click handler\n     * include, exclude and subtract\n     */\n    var TagClickHandler = function ( event ) {\n        // ctrl holding\n        if ( event.ctrlKey ) {\n            NoteFilter.TagSubtract(this.tagnm);\n        } else {\n            if ( this.finc ) {\n                // available for selection\n                NoteFilter.TagInclude(this.tagnm);\n            } else {\n                // already selected\n                NoteFilter.TagExclude(this.tagnm);\n            }\n        }\n        // prevent bubbling\n        return false;\n    };\n\n\n    /**\n     * Makes a list of note tags buttons with handlers\n     * @param note array note attributes\n     * @return array of html tag nodes or hint string\n     */\n    var BuildNoteTags = function ( note ) {\n        var list = [], exc = [], inc = [];\n        // there is some data\n        if ( note.tags.length > 0 ) {\n            // separate tags\n            note.tags.forEach(function ( item ) {\n                if ( NoteFilter.data.tinc.has(item) ) {\n                    inc.push(TagManager.dataIdlist[item]);\n                } else {\n                    exc.push(TagManager.dataIdlist[item]);\n                }\n            });\n            // forms the list of tags already selected\n            inc.sort().forEach(function ( item ) {\n                // create html wrapper for tag\n                item = element('span', {className: 'tag include', tagnm: item, title: hint_tag_exclude}, item);\n                // mouse click handler\n                //$(item).bind('click', TagClickHandler);\n                item.addEventListener('click', TagClickHandler);\n                list.push(item);\n            });\n            // forms the list of tags available for selection\n            exc.sort().forEach(function ( item ) {\n                // create html wrapper for tag\n                item = element('span', {className: 'tag', finc: true, tagnm: item, title: hint_tag_include}, item);\n                // mouse click handler\n                //$(item).bind('click', TagClickHandler);\n                item.addEventListener('click', TagClickHandler);\n                list.push(item);\n            });\n        }\n        // list of tags or missing hint\n        return list.length > 0 ? list : hint_tags_missing;\n    }\n\n\n    /**\n     * Returns the corresponding note icon image address\n     * @param note array note attributes\n     * @return string\n     */\n    var GetNoteIcon = function ( note ) {\n        // prepare\n        var icon = 'img/tags/note.svg',\n            tags = TagManager.IDs2Names(note.tags);\n\n        // iterate words in the tag list\n        tags.forEach(function ( tag ) {\n            var has = templates.some(function ( template ) {\n                return template.name === tag;\n            });\n\n            // it's a tag from the global set\n            if ( has ) {\n                // get the first match\n                icon = 'img/tags/' + tag + '.svg';\n            }\n        });\n\n        return icon;\n    };\n\n\n    /**\n     * Shows/hides checked notes controls and general notes info\n     * @param ctrlonly flag to skip or not the control buttons\n     */\n    this.UpdateCtrlBlock = function ( ctrlonly ) {\n        //var total = self.dom.notes.childNodes.length;\n        if ( !ctrlonly ) {\n            // list of visible notes\n            var visible = this.GetNotesVisible();\n            // clear and fill\n            elchild(elclear(self.dom.tpinfo), [\n                // block with amount\n                element('span', {className: 'amount'}, [\n                    // title\n                    element('p', {}, 'notes '),\n                    // amount of visible notes\n                    element('b', {title: hint_notes_visible}, visible.length), ' of ', element('span', {title: hint_notes_total}, this.data.total),\n                    // total amount of notes\n                    (visible.length < this.data.notes.length ? [element('p', {className: 'div'}, '|'), element('b', {title: hint_notes_filtered}, this.data.notes.length - visible.length), ' filtered'] : null),\n                    // link to load all available notes\n                    (this.data.notes.length < this.data.total ? [element('p', {className: 'div'}, '|'), element('a', {}, 'load all', {\n                        onclick: function () {\n                            NoteFilter.NotesRequest(true);\n                        }\n                    })] : null)\n                ]),\n                // block with selection\n                element('span', {}, [\n                    // title\n                    element('p', {}, 'select '),\n                    // link to select all notes\n                    element('a', {}, 'all', {\n                        onclick: function () {\n                            self.SetNotesState(visible, 'marked', true);\n                            self.UpdateCtrlBlock(true);\n                        }\n                    }),\n                    element('p', {className: 'div'}, '|'),\n                    // link to remove selection from all notes\n                    element('a', {}, 'none', {\n                        onclick: function () {\n                            self.SetNotesState(visible, 'marked', false);\n                            self.UpdateCtrlBlock(true);\n                        }\n                    }),\n                    element('p', {className: 'div'}, '|'),\n                    // link to invert selection\n                    element('a', {}, 'invert', {\n                        onclick: function () {\n                            self.SetNotesState(visible, 'marked');\n                            self.UpdateCtrlBlock(true);\n                        }\n                    })\n                ])\n            ]);\n        }\n        // get the list of checked notes\n        var checked = this.GetNotesByState('marked');\n        // hide all buttons\n        this.dom.btndelete.style.display = 'none';\n        this.dom.btnrestore.style.display = 'none';\n        // show only the corresponding one\n        if ( checked.length > 0 ) (NoteFilter.data.wcmd.has('deleted') ? this.dom.btnrestore : this.dom.btndelete).style.display = 'block';\n        // show/hide block depending on notes amount\n        this.dom.tpbar.style.display = this.data.total === 0 ? 'none' : 'block';\n    }\n\n\n    /**\n     * Set the default note state, removes additional classes and resets the state flags\n     * @param notes if given than it's the only note list to be reset\n     */\n    this.ClearNotesState = function ( notes ) {\n        // all notes or the given one/ones\n        var i, list = notes || self.dom.notes.childNodes;\n        // iterate formed list\n        for ( i = 0; i < list.length; i++ ) {\n            // reset class\n            list[i].className = 'note';\n            // reset state flags\n            list[i].state.active = list[i].state.marked = false;\n        }\n    }\n\n\n    /**\n     * Sets the flag and clall to the given note/notes\n     * @param notes to be processed\n     * @param type string name active | marked\n     * @param state optional bool flag, if set true - set, false - unset\n     */\n    this.SetNotesState = function ( notes, type, state ) {\n        // check input\n        if ( notes.length > 0 ) {\n            notes.forEach(function ( note ) {\n                // determine the state to switch to\n                note.state[type] = state !== undefined ? state : (note.state[type] ? false : true);\n                // invert class\n                //$(note).toggleClass(type, note.state[type]);\n                note.classList.toggle(type, note.state[type]);\n            });\n        }\n    };\n\n\n    /**\n     * Returns the list of notes with the given state\n     * @param type string state name active | marked\n     * @return array of nodes\n     */\n    this.GetNotesByState = function ( type ) {\n        // all notes or only the given one\n        var i, result = [], list = self.dom.notes.childNodes;\n        // iterate formed list\n        for ( i = 0; i < list.length; i++ ) {\n            if ( list[i].state[type] === true ) result.push(list[i]);\n        }\n        return result;\n    }\n\n\n    /**\n     * Returns the html note block by id if found or false otherwise\n     * @param id int note attribute\n     * @return node with data or false on failure\n     */\n    this.GetNoteByID = function ( id ) {\n        // iterate note list\n        for ( var i = 0, list = this.dom.notes.childNodes; i < list.length; i++ ) {\n            // return if matched\n            if ( list[i].data.id === id ) return list[i];\n        }\n        return false;\n    }\n\n\n    /**\n     * Returns the list of visible notes\n     * @return array of nodes\n     */\n    this.GetNotesVisible = function () {\n        // iterate note list\n        for ( var i = 0, result = [], list = this.dom.notes.childNodes; i < list.length; i++ ) {\n            // fill the visible notes list\n            if ( !list[i].style.display ) result.push(list[i]);\n        }\n        return result;\n    }\n\n\n    /**\n     * Whole note ckick handler\n     * highlights the active note or note range\n     * holding Ctrl checks/unchecks the selected notes\n     * holding Shift selects all the notes between old and new selected notes\n     * @param event event object\n     */\n    var NoteClickHandler = function ( event ) {\n        // holding Ctrl key\n        if ( event.ctrlKey ) {\n            self.SetNotesState([this], 'marked');\n            // simple mouse click\n        } else {\n            // currently active note list\n            var alast = self.GetNotesByState('active');\n            // flag true if the clicked note is the same as already active\n            var fsame = alast.length > 0 && alast[0].data.id === this.data.id;\n            // check current note modifications\n            var has_changes = NoteEditor.HasChanges();\n            // not changed or user confirmed his wish\n            if ( !has_changes || fsame || (has_changes && NoteEditor.ConfirmExit()) ) {\n                // reset all notes states\n                self.ClearNotesState();\n                // check if the edited note is not already active\n                if ( NoteEditor.GetNoteID() !== this.data.id ) {\n                    // show note details\n                    NoteEditor.Load(this.data);\n                }\n                // make active\n                self.SetNotesState([this], 'active');\n                // holding Shift key\n                if ( event.shiftKey ) {\n                    var i, item, cflag = false;\n                    // iterate all notes\n                    for ( i = 0; i < self.dom.notes.childNodes.length; i++ ) {\n                        // cursor\n                        item = self.dom.notes.childNodes[i];\n                        // flag showing that the cursor is inside the range\n                        if ( item.data.id === alast[0].data.id || item.data.id === this.data.id ) cflag = !cflag;\n                        // check inside the range or edge items\n                        if ( cflag || item.data.id === alast[0].data.id || item.data.id === this.data.id ) {\n                            self.SetNotesState([item], 'marked');\n                        }\n                    }\n                } else {\n                    // check the only clicked note\n                    self.SetNotesState([this], 'marked');\n                }\n            }\n        }\n        // show/hide checked notes controls\n        self.UpdateCtrlBlock();\n        // prevent bubbling\n        //return false;\n    }\n\n\n    /**\n     * Note checkbox ckick handler\n     */\n    var NoteTickClickHandler = function () {\n        // check/uncheck\n        self.SetNotesState([this.note], 'marked');\n        // show/hide checked notes controls\n        self.UpdateCtrlBlock();\n        // prevent bubbling\n        return false;\n    }\n\n\n    /**\n     * Forms the note wrapper\n     * @param data array of note parameters\n     * @return formed node with data\n     */\n    this.BuildNote = function ( data ) {\n        // note body\n        var note = element('div', {className: 'note', data: data, dom: {}, state: {}});\n        // note content\n        elchild(note, [\n            element('div', {className: 'icon'}, [\n                note.dom.icon = element('img', {className: 'icon', src: GetNoteIcon(data)}),\n                //note.dom.icon = BuildNoteIcon(data),\n                note.dom.tick = element('div', {className: 'tick', note: note})\n            ]),\n            element('div', {className: 'body'}, [\n                note.dom.info = element('div', {className: 'info'}, BuildNoteInfo(data, note.dom.icon)),\n                //note.dom.time = element('div', {className: 'time'}, TimestampToDateStr(data.mtime)),\n                note.dom.tags = element('div', {className: 'tags'}, BuildNoteTags(data))\n            ])\n        ]);\n        // whole note ckick\n        //$(note).bind('click', NoteClickHandler);\n        note.addEventListener('click', NoteClickHandler);\n        // checkbox click\n        //$(note.dom.tick).bind('click', NoteTickClickHandler);\n        note.dom.tick.addEventListener('click', NoteTickClickHandler);\n        // note html body\n        return note;\n    };\n\n\n    /**\n     * Shows/hides notes according to the filter\n     * @param notes array of notes that should be processed, all if not given\n     */\n    this.SetNotesVisibility = function ( notes ) {\n        // all notes or the given one/ones\n        notes = notes || this.dom.notes.childNodes;\n        var i, visible,  // flag for visibility\n            hlist = [];  // list of the notes that should be hidden\n        // iterate formed list\n        for ( i = 0; i < notes.length; i++ ) {\n            // by default is visible\n            visible = true;\n            // check by tags\n            //TODO:???\n            // check by filter string if still visible\n            if ( visible ) {\n                // check included words\n                NoteFilter.data.winc.forEach(function ( word ) {\n                    // not found in fulltext so exit\n                    if ( notes[i].data.fulltext.indexOf(word.toLowerCase()) < 0 ) {\n                        visible = false;\n                        return;\n                    }\n                });\n                // still visible\n                if ( visible ) {\n                    // check excluded words\n                    NoteFilter.data.wexc.forEach(function ( word ) {\n                        // found in fulltext so exit\n                        if ( notes[i].data.fulltext.indexOf(word.toLowerCase()) >= 0 ) {\n                            visible = false;\n                            return;\n                        }\n                    });\n                }\n            }\n            // apply visibility flag\n            notes[i].style.display = visible ? '' : 'none';\n            // fill the list of notes to be hidden\n            if ( !visible ) hlist.push(notes[i]);\n        }\n        // clear inner state for hidden notes\n        this.ClearNotesState(hlist);\n        this.UpdateCtrlBlock();\n    }\n\n\n    /**\n     * Fills the note list with generated notes\n     * @param notes array of notes or false if gloabal latest list should be used\n     * @param total int general amount of notes\n     */\n    this.BuildTable = function ( notes, total ) {\n        // check input\n        notes = notes instanceof Array ? notes : [];\n        // set global data\n        this.data.notes = notes;\n        this.data.total = total;\n        // clearing the container\n        elclear(this.dom.notes);\n        // there are some notes\n        if ( total > 0 ) {\n            // determine the note id beeing edited at the moment\n            var note, neid = NoteEditor.GetNoteID();\n            // iterate all notes\n            notes.forEach(function ( item ) {\n                // append the created note to the list\n                note = self.BuildNote(item);\n                self.SetNotesVisibility([note]);\n                elchild(self.dom.notes, note);\n                // highlight the edited at the moment note\n                if ( neid === item.id ) self.SetNotesState([note], 'active');\n            });\n        }\n        // show/hide control panel\n        this.UpdateCtrlBlock();\n    };\n\n\n    /**\n     * Deletes or restore selected notes depending on undo flag\n     */\n    var BtnDeleteHandler = function () {\n        // ask user\n        if ( confirm(this.undo ? msg_checked_notes_restore : msg_checked_notes_remove) ) {\n            var list = [];\n            // iterate all checked notes\n            self.GetNotesByState('marked').forEach(function ( note ) {\n                // fill id list\n                if ( note.data.id ) list.push(note.data.id);\n            });\n            // send request\n            NotesDelete(list, this.undo);\n        }\n    }\n\n\n    /**\n     * Main init method\n     * @param params list of configuration parameters\n     */\n    this.Init = function ( params ) {\n        // check input\n        if ( !params.handle ) return;\n        // html parent object\n        this.dom = {handle: params.handle};\n\n        this.data = {\n            total: 0,  // total amount on notes\n            notes: []  // all requested notes data array\n        };\n\n        // build all blocks together\n        elchild(this.dom.handle, [\n            // top panel\n            this.dom.tpbar = element('div', {className: 'tpbar'}, [\n                // controls\n                this.dom.tpctrl = element('div', {className: 'ctrl'}, [\n                    this.dom.btndelete = element('input', {\n                        type: 'button',\n                        value: 'Delete',\n                        undo: false,\n                        className: 'button hidden'\n                    }, null, {onclick: BtnDeleteHandler}),\n                    this.dom.btnrestore = element('input', {\n                        type: 'button',\n                        value: 'Restore',\n                        undo: true,\n                        className: 'button hidden'\n                    }, null, {onclick: BtnDeleteHandler})\n                ]),\n                // general info, load all, select all/none/invert\n                this.dom.tpinfo = element('div', {className: 'info'})\n            ]),\n            // note list\n            this.dom.notes = element('div', {className: 'notes'})\n            // bottom panel\n            //this.dom.btbar = element('div', {className: 'btbar'})\n        ]);\n\n        // disable selection\n        // this.dom.notes.onselectstart = function () {\n        //     return false;\n        // } // ie\n        // this.dom.notes.onmousedown = function () {\n        //     return false;\n        // } // mozilla\n    };\n};\n\n\n// public\nmodule.exports = NoteList;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar list = [\n    {\n        name: 'note',\n        description: 'simple note with title and text',\n        entries: [\n            {id: 1, name: 'title'},\n            {id: 6, name: 'description'}\n        ]\n    },\n    {\n        name: 'site',\n        description: 'regular site bookmark',\n        entries: [\n            {id: 2, name: 'site url'},\n            {id: 5, name: 'email'},\n            {id: 4, name: 'password'},\n            {id: 6, name: 'comments'}\n        ]\n    },\n    {\n        name: 'email',\n        description: 'email address record',\n        entries: [\n            {id: 2, name: 'site url'},\n            {id: 5, name: 'email'},\n            {id: 4, name: 'password'},\n            {id: 6, name: 'comments'}\n        ]\n    },\n    {\n        name: 'messenger',\n        description: 'instant messenger account information',\n        entries: [\n            {id: 2, name: 'site url'},\n            {id: 5, name: 'email'},\n            {id: 3, name: 'username'},\n            {id: 4, name: 'password'},\n            {id: 1, name: 'phone'},\n            {id: 6, name: 'comments'}\n        ]\n    },\n    {\n        name: 'ftp',\n        description: 'ftp server data',\n        entries: [\n            {id: 2, name: 'server address'},\n            {id: 3, name: 'username'},\n            {id: 4, name: 'password'},\n            {id: 6, name: 'comments'}\n        ]\n    },\n    {\n        name: 'ssh',\n        description: 'ssh server data',\n        entries: [\n            {id: 2, name: 'server address'},\n            {id: 3, name: 'username'},\n            {id: 4, name: 'password'},\n            {id: 6, name: 'comments'}\n        ]\n    },\n    {\n        name: 'database',\n        description: 'database access parameters',\n        entries: [\n            {id: 2, name: 'server address'},\n            {id: 1, name: 'database name'},\n            {id: 3, name: 'username'},\n            {id: 4, name: 'password'},\n            {id: 6, name: 'comments'}\n        ]\n    }\n];\n\n\n// public\nmodule.exports = list;\n","/**\n * List of note templates\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar templates = require('./data.templates');\n\n\nvar TemplateList = new function () {\n    // for limited scopes\n    var self = this;\n\n    var hint_main = 'In the list above please select a template to be used to create your new note.';\n    var hint_item = 'This template will create a note with this set of entries:<br>';\n    //var hint_filter = 'filter by name or description ...';\n\n\n    /**\n     * Open the subscriber\n     * master password is accessible\n     * decrypt all the data and show it\n     */\n    // this.EventOpen = function () {\n    //     console.log('TemplateList.EventOpen');\n    //     //this.Fill();\n    //     // component state flag\n    //     this.open = true;\n    // };\n\n    /**\n     * Close the subscriber\n     * master password is expired and cleared\n     * clear all the decrypted data\n     */\n    // this.EventClose = function () {\n    //     // close only if opened at the moment\n    //     if ( this.open ) {\n    //         elclear(this.dom.list);\n    //         // component state flag\n    //         this.open = false;\n    //     }\n    // };\n\n\n    /**\n     * Fills the list with templates\n     */\n    this.Fill = function () {\n        // prepare\n        elclear(self.dom.list);\n        // iterate all templates\n        //window.dataTemplates.data.forEach(function ( data ) {\n        templates.forEach(function ( data ) {\n            // template body\n            var item = element('div', {className: 'item', /*style:'display:none',*/ data: data},\n                element('div', {className: 'line ' + data.name}, [\n                    element('div', {className: 'name'}, data.name),\n                    element('div', {className: 'hint'}, data.description)\n                ]));\n            // append\n            elchild(self.dom.list, item);\n            // template item handlers\n            //$(item).click(function(){\n            item.addEventListener('click', function () {\n                self.Show(false);\n                NoteEditor.Create(this.data);\n            });\n            //$(item).mouseenter(function(){\n            item.addEventListener('mouseenter', function () {\n                var list = [];\n                data.entries.forEach(function ( entry ) {\n                    list.push('<b>' + entry.name + '</b>');\n                });\n                // window.dataTemplateEntries.data[this.data[window.dataTemplates.defn.id]].forEach(function ( entry ) {\n                //     list.push('<b>' + entry[window.dataTemplateEntries.defn.name] + '</b>');\n                // });\n                self.dom.hint.innerHTML = hint_item + list.join(', ');\n            });\n        });\n        //this.Filter();\n    };\n\n\n    /**\n     * Filters by given text\n     * @param text string to search in each template name or description\n     */\n    // this.Filter = function ( text ) {\n    //     text = text || this.dom.filter.value;\n    //     text = text.toLowerCase();\n    //     for ( var i = 0; i < self.dom.list.childNodes.length; i++ ) {\n    //         // prepare\n    //         var item = self.dom.list.childNodes[i];\n    //         var name = item.data[window.dataTemplates.defn.name].toLowerCase();\n    //         var desc = item.data[window.dataTemplates.defn.description].toLowerCase();\n    //         // search substring and show/hide\n    //         //$(item).toggle(name.indexOf(text) >= 0 || desc.indexOf(text) >= 0);\n    //         item.classList.toggle('hidden', !(!text || name.indexOf(text) >= 0 || desc.indexOf(text) >= 0));\n    //     }\n    // };\n\n\n    /**\n     * Shows/hides the component\n     * @param state visibility flag: true - show, false - hide\n     */\n    this.Show = function ( state ) {\n        this.dom.handle.style.display = state ? 'block' : 'none';\n    };\n\n\n    /**\n     * Main init method\n     * @param params list of configuration parameters\n     */\n    this.Init = function ( params ) {\n        // check input\n        if ( !params.handle ) return;\n        // html parent object\n        this.dom = {handle: params.handle};\n        // build main blocks together\n        elchild(this.dom.handle, [\n            this.dom.title = element('div', {className: 'title'}),\n            this.dom.list = element('div', {className: 'list'}),\n            this.dom.hint = element('div', {className: 'hint'}, hint_main)\n        ]);\n        // reset hint\n        //$(this.dom.handle).mouseleave(function(){\n        this.dom.handle.addEventListener('mouseleave', function () {\n            self.dom.hint.innerHTML = hint_main;\n        });\n\n        //this.dom.filter = element('input', {type:'text', value:hint_filter});\n        //this.dom.filter = element('input', {type: 'text', placeholder: hint_filter});\n        // watermark and filtering\n        //watermark(this.dom.filter, hint_filter, '#000');\n        //$(this.dom.filter).keyup(function(){\n        // this.dom.filter.addEventListener('keyup', function () {\n        //     self.Filter(this.value);\n        // });\n\n        // title\n        elchild(this.dom.title, [element('div', {className: 'text'}, 'Templates')/*, this.dom.filter*/]);\n\n        this.Fill();\n    };\n};\n\n\n// public\nmodule.exports = TemplateList;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar app     = require('./app'),\n    sjcl    = require('./sjcl.min'),\n    api     = require('./api'),\n    //dialogs = require('./app.dialogs'),\n    //NoteFilter   = require('./app.note.filter'),\n    NoteList     = require('./note.list'),\n    TemplateList = require('./template.list'),\n    //NoteEditor   = require('./app.note.editor'),\n    TagManager   = require('./tag.manager'),\n    collectTimer;\n\n\nrequire('./note.filter');\nrequire('./note.editor');\nrequire('./tools');\nrequire('./dialogs');\n\n\nwindow.Logout = function SignOut () {\n    api.post('user/logout', null, function ( error, data ) {\n        if ( error ) {\n            console.error(error);\n            return;\n        }\n\n        // true or false\n        console.log('logout', data);\n\n        location.reload();\n    });\n};\n\n\nwindow.initData = function initData ( user, pass, callback ) {\n    app.setPass(pass);\n    window.dataUser = user;\n\n    api.get('user/tags', function ( error, tags ) {\n        if ( error ) {\n            console.error(error);\n            //callback();\n\n            return;\n        }\n\n        console.log('user tags', tags);\n\n        //window.dataEntryTypes = data.entry_types;\n        //window.dataTemplates = data.templates;\n        //window.dataTemplateEntries = data.template_entries;\n\n        // compacted list of all encoded tags with links and use counters\n        //window.dataTags = tags;\n        // need to correct type if empty\n        // if ( !window.dataTags.data.length ) {\n        //     window.dataTags.data = {};\n        //     window.dataTags.defn = {name:0, links:1, uses:2};\n        // }\n        // // decoded to these two lists\n        // window.dataTagsNmlist = {}; // {note:1, site:2, email:3}\n        // window.dataTagsIdlist = {}; // {1:note, 2:site, 3:email}\n        // // they are filling on page loading and on note creation\n        // // if there are some new tags\n\n        // main components initialization\n        TagManager.Init(tags);\n        NoteList.Init({handle: document.querySelector('div.notelist')});\n        NoteFilter.Init({handle: document.querySelector('div.notefilter')});\n        TemplateList.Init({handle: document.querySelector('div.templatelist')});\n        NoteEditor.Init({handle: document.querySelector('div.noteeditor')});\n\n        // to receive password change events\n        //app.subscribe(TagManager);\n        //app.subscribe(TemplateList);\n        //app.subscribe(NoteList);\n        //app.subscribe(NoteFilter);\n        //app.subscribe(NoteEditor);\n\n        // show\n        window.pageMain.style.display = 'block';\n\n        callback();\n    });\n};\n\n\n// contains encrypted data for export\n// if not null an export window appears\nwindow.exportData = null;\n\n// list of tag names with title images\n//window.iconTags = ['email', 'ftp', 'ssh', 'icq', 'note', 'site', 'skype', 'jabber', 'msn', 'database'];\n\n//window.pageInit = document.getElementById('pageInit');\nwindow.pageMain = document.getElementById('pageMain');\n\n\n// start entropy collection\nsjcl.random.startCollectors();\n// check each 5 sec if has enough\ncollectTimer = setInterval(function () {\n    if ( sjcl.random.isReady() ) {\n        console.log('entropy collected');\n        // has enough\n        sjcl.random.stopCollectors();\n        // stop checking\n        clearInterval(collectTimer);\n    }\n}, 1000);\n\n\napi.get('user/info', function ( error, data ) {\n    if ( error ) {\n        console.error(error);\n        //return;\n    }\n\n    console.log('user info', data);\n\n    if ( data ) {\n        window.dataUser = data;\n\n        // apply current pass hash\n        app.setPassHash(data.hash);\n        // ask for a pass\n        DlgPassGet.Show({escClose: false});\n    } else {\n        //window.pageInit.style.display = 'block';\n        DlgUserLogin.Show({escClose: false});\n    }\n});\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar //autocomplete = require('autocompleter'),\n    //app = require('./app'),\n    api = require('./api'),\n    NoteList = require('./note.list'),\n    TagManager = require('./tag.manager');\n\n\n/**\n * Main module to work with user tags and words input\n * sends ajax request to the server side, helps to render results, shows messages\n */\nvar NoteFilter = new function () {\n    // for limited scopes\n    var self = this;\n\n    // component state flag\n    // true  - everything is decoded\n    // false - no plain data, everything is encrypted\n    //this.open = false;\n\n    // hints\n    var hint_wexclude = 'click on this word to remove it from the filtering';\n    var hint_home = 'reset all search parameters and filters and request the latest active notes';\n\n    // autocompleter commands hints\n    var hint_cmd = {\n        ':day': 'notes modified during the last 24 hours',\n        ':week': 'notes modified during the last week',\n        ':month': 'notes modified during the last month',\n        ':notags': 'notes without tags',\n        ':deleted': 'deleted notes'\n    };\n\n    // message texts\n    var msg_info_no_data = 'There are no records to meet the given search options. You can change these options or see your ';\n    var msg_fail_server_error = 'The request was not successful. The response from the server: ';\n\n\n    /**\n     * Open the subscriber\n     * master password is accessible\n     * decrypt all the data and show it\n     */\n    // this.EventOpen = function () {\n    //     // decrypt input data if not the first time\n    //     if ( this.dom.input.data.length ) {\n    //         this.dom.input.data = JSON.parse(app.decode(this.dom.input.data));\n    //     }\n    //     // restore backuped value\n    //     this.dom.input.value = this.dom.input.data.encval;\n    //     // inner parsed data\n    //     this.data = TagManager.StrParse(this.dom.input.value);\n    //     this.post = TagManager.StrParse();\n    //     // build notes\n    //     PerformSearch();\n    //     // show/hide info and controls\n    //     NoteList.UpdateCtrlBlock(true);\n    //     // component state flag\n    //     this.open = true;\n    // };\n\n    /**\n     * Close the subscriber\n     * master password is expired and cleared\n     * clear all the decrypted data\n     */\n    // this.EventClose = function () {\n    //     // close only if opened at the moment\n    //     if ( this.open ) {\n    //         // delete messages\n    //         self.MsgClear();\n    //         // backup and clear search string\n    //         this.dom.input.data.encval = this.dom.input.value;\n    //         // encrypt input data\n    //         this.dom.input.data = app.encode(JSON.stringify(this.dom.input.data));\n    //         // hide current value\n    //         this.dom.input.value = '[encrypted data]';\n    //         // inner parsed data\n    //         this.data = {};\n    //         this.post = {};\n    //         // clear autocompleter\n    //         $(this.dom.input).data('autocompleter').options.data = [true];\n    //         // component state flag\n    //         this.open = false;\n    //     }\n    // };\n\n\n    /**\n     * Removes all the messages\n     */\n    this.MsgClear = function () {\n        elclear(this.dom.messages);\n    };\n\n\n    /**\n     * Appends the given message\n     * @param text string message to add\n     * @param type string message type: info (default), warn, fail\n     */\n    this.MsgAdd = function ( text, type ) {\n        elchild(this.dom.messages, element('div', {className: type || 'info'}, text));\n    };\n\n\n    /**\n     * Set focus to tag search field\n     */\n    this.SetFocus = function () {\n        this.dom.input.focus();\n    };\n\n\n    /**\n     * Visual flags\n     */\n    var LoadingStart = function () {\n        self.dom.icon.className = 'icon loading';\n        self.dom.messages.className = 'messages loading';\n    };\n\n\n    /**\n     * Visual flags\n     */\n    var LoadingStop = function () {\n        self.dom.icon.className = 'icon';\n        self.dom.messages.className = 'messages';\n    };\n\n\n    /**\n     * Resets the current search options\n     * and get the lates notes\n     */\n    this.RequestLatest = function () {\n        this.Reset();\n        this.NotesRequest();\n    };\n\n\n    /**\n     * Resets the current search options\n     * and get the deleted notes using :deleted tag\n     */\n    this.RequestDeleted = function () {\n        //this.Reset();\n        this.MsgClear();\n        // update user input\n        this.dom.input.value = ':deleted';\n        // prepare inner data\n        this.UpdateParsedInput();\n        // get data and build note list\n        this.NotesRequest();\n    };\n\n\n    /**\n     * Sends ajax request to receive notes by tags and\n     * makes a note list using the received data\n     */\n    this.NotesRequest = function ( isall ) {\n        // show loading progress\n        LoadingStart();\n        // clone current data to post data\n        for ( var item in this.data ) this.post[item] = this.data[item].slice();\n\n        api.post('note/search', {\n            tinc: this.post.tinc,\n            texc: this.post.texc,\n            wcmd: this.post.wcmd,\n            all: isall\n        }, function ( error, data ) {\n            if ( error ) {\n                console.error(error);\n            }\n\n            console.log('note search', data);\n\n            if ( !data.error ) {\n                // make note list using the received data\n                NoteList.BuildTable(data.notes, data.total);\n                // check if no data but show message only if there were some search options uses\n                if ( data.total === 0 && (self.data.tinc.length || self.data.texc.length || self.data.wcmd.length) )\n                // no data, need to inform and suggest to see for example the latest notes\n                    self.MsgAdd([msg_info_no_data, element('a', {className: 'bold'}, 'latest notes', {\n                        onclick: function () {\n                            self.RequestLatest();\n                        }\n                    })]);\n            } else {\n                // server error\n                self.MsgAdd(msg_fail_server_error + data.error, 'fail');\n            }\n\n            // hide loading progress\n            LoadingStop();\n        });\n    };\n\n\n    /**\n     * Updates inner data from user input if changed since last time\n     */\n    this.UpdateParsedInput = function () {\n        // check if old and current values match\n        if ( this.dom.input.value.trim() !== this.dom.input.data.oldval.trim() ) {\n            // updating parsed data\n            this.data = TagManager.StrParse(this.dom.input.value);\n            // save current values\n            this.dom.input.data.oldval = this.dom.input.value;\n        }\n    };\n\n\n    /**\n     * Search handler\n     * updates the inner parsed data, saves the history and do the search\n     * Ctrl+Enter does the search and reformats the search string\n     * @param ctrl bool flag for Ctrl key holding\n     */\n    this.DoSearch = function ( ctrl ) {\n        var data = this.dom.input.data;\n\n        // prepare inner data\n        this.UpdateParsedInput();\n        // history\n        //with ( self.dom.input ) {\n        // first record or not the same as the last one\n        if ( data.history.length === 0 || data.history[data.history.length - 1] !== this.dom.input.value ) {\n            // fill history and reset cursor\n            data.history.push(this.dom.input.value);\n            data.histpos = data.history.length;\n        }\n        //}\n        // update user input if necessary\n        if ( ctrl ) this.dom.input.data.oldval = this.dom.input.value = TagManager.StrBuild(this.data);\n        // do search\n        PerformSearch();\n    };\n\n\n    /**\n     * Keyboard input handler for tag search\n     */\n    var PerformSearch = function () {\n        // delete old messages\n        self.MsgClear();\n        // not empty input\n//        if ( self.dom.input.value.trim() != '' ) {\n        // parsed tags and already posted don't match\n        if ( self.data.tinc.sort().join() != self.post.tinc.sort().join() ||\n            self.data.texc.sort().join() != self.post.texc.sort().join() ||\n            self.data.wcmd.sort().join() != self.post.wcmd.sort().join() ||\n            self.dom.input.value.trim() == '' ) {\n            // there are changes\n            self.NotesRequest();\n        } else {\n            // manual filtering all the table as it was not recreated\n            NoteList.SetNotesVisibility();\n        }\n        // check input for wrong tags\n        if ( self.data.winc.length > 0 || self.data.wexc.length > 0 ) {\n            var list = []; // shows them comma-separated\n            self.data.winc.sort().forEach(function ( item ) {\n                list.push(element('a', {title: hint_wexclude, word: item, fexc: false}, item, {onclick: WordExclude}));\n            });\n            self.data.wexc.sort().forEach(function ( item ) {\n                list.push(element('a', {\n                    title: hint_wexclude,\n                    word: item,\n                    fexc: true\n                }, '-' + item, {onclick: WordExclude}));\n            });\n            self.MsgAdd(['Here is the list of words used which are not your tags:', list, '. It was used for text filtering.']);\n        }\n//        } else {\n//            // show latest\n//            NoteList.BuildTable(false);\n//            // reset inner data\n//            self.data = TagManager.StrParse();\n//            self.post = TagManager.StrParse();\n//        }\n    };\n\n\n    /**\n     * Adds the given tag to the search\n     * @param tagnm string tag name to be processed\n     */\n    this.TagInclude = function ( tagnm ) {\n        // determine tag id\n        var tagid = TagManager.dataNmlist[tagnm];\n        // not added already and valid id\n        if ( tagid && !this.data.tinc.has(tagid) ) {\n            // prepare inner parsed data\n            this.data.tinc.push(tagid);\n            this.data.ninc.push(tagnm);\n            // reforman input\n            this.dom.input.data.oldval = this.dom.input.value = TagManager.StrBuild(this.data);\n        }\n        // execute\n        PerformSearch();\n    };\n\n\n    /**\n     * Removes the given tag from the search\n     * @param tagnm string tag name to be processed\n     */\n    this.TagExclude = function ( tagnm ) {\n        // determine tag id\n        var tagid = TagManager.dataNmlist[tagnm];\n        // exists in the search line and valid id\n        if ( tagid && this.data.tinc.has(tagid) ) {\n            // locate tag name and id in the inner parsed data\n            var tinci = this.data.tinc.indexOf(tagid);\n            var ninci = this.data.ninc.indexOf(tagnm);\n            // and clear\n            if ( tinci >= 0 ) this.data.tinc.splice(tinci, 1);\n            if ( ninci >= 0 ) this.data.ninc.splice(ninci, 1);\n            // reforman input\n            this.dom.input.data.oldval = this.dom.input.value = TagManager.StrBuild(this.data);\n            //ReworkSearchStr();\n        }\n        // execute\n        PerformSearch();\n    };\n\n\n    /**\n     * Subtracts the given tag in the search\n     * @param tagnm string tag name to be processed\n     */\n    this.TagSubtract = function ( tagnm ) {\n        // determine tag id\n        var tagid = TagManager.dataNmlist[tagnm];\n        // not subtracted already and valid id\n        if ( tagid && !this.data.texc.has(tagid) ) {\n            // locate tag name and id in the inner parsed data\n            var tinci = this.data.tinc.indexOf(tagid);\n            var ninci = this.data.ninc.indexOf(tagnm);\n            // and clear\n            if ( tinci >= 0 ) this.data.tinc.splice(tinci, 1);\n            if ( ninci >= 0 ) this.data.ninc.splice(ninci, 1);\n            // prepare inner parsed data\n            this.data.texc.push(tagid);\n            this.data.nexc.push(tagnm);\n            // reforman input\n            this.dom.input.data.oldval = this.dom.input.value = TagManager.StrBuild(this.data);\n            //ReworkSearchStr();\n        }\n        // execute\n        PerformSearch();\n    };\n\n\n    /**\n     * Removes the clicked word from the search\n     */\n    var WordExclude = function () {\n        var list = this.fexc ? self.data.wexc : self.data.winc,\n            wind = list.indexOf(this.word);\n        if ( wind >= 0 ) {\n            // delete word from inner data\n            list.splice(wind, 1);\n            // remove html element\n            this.parentNode.removeChild(this);\n            // remove message if there are no more words\n            if ( self.data.winc.length === 0 && self.data.wexc.length === 0 ) {\n                self.MsgClear();\n            }\n            // reforman input\n            self.dom.input.data.oldval = self.dom.input.value = TagManager.StrBuild(self.data);\n            // filtering all the table\n            NoteList.SetNotesVisibility();\n        }\n    };\n\n\n    /**\n     * Set default search hints and remove messages\n     */\n    this.Reset = function () {\n        // clear search string and set focus\n        this.dom.input.data.oldval = this.dom.input.value = '';\n        self.dom.input.focus();\n        // clear tags data\n        this.data = TagManager.StrParse();\n        this.post = TagManager.StrParse();\n        // delete all messages\n        self.MsgClear();\n    };\n\n\n    /**\n     * Main init method\n     * @param params list of configuration parameters\n     */\n    this.Init = function ( params ) {\n        // check input\n        if ( !params.handle ) return;\n        // html parent object\n        this.dom = {handle: params.handle};\n\n        // parsed input data and its copy on post\n        this.data = TagManager.StrParse();\n        this.post = TagManager.StrParse();\n\n        // build all blocks together\n        elchild(this.dom.handle, [\n            // main block\n            element('div', {className: 'search'}, [\n                // home button and tags search input\n                this.dom.home = element('div', {className: 'home'}, element('div', {title: hint_home}, null, {\n                    onclick: function () {\n                        self.RequestLatest();\n                    }\n                })),\n                this.dom.input = element('input', {\n                    className: 'line',\n                    placeholder: 'search by tags or content ...',\n                    type: 'text',\n                    data: {encval: '', oldval: '', history: [], histpos: 0}\n                }),\n                this.dom.icon = element('div', {className: 'icon'})\n            ]),\n            // hidden messages\n            this.dom.messages = element('div', {className: 'messages'})\n        ]);\n\n        /*autocomplete({\n            minLength: 1,\n            input: this.dom.input,\n            fetch: function ( text, update ) {\n                var tags = text.toLowerCase().match(/(\\S+)/g);\n\n                console.log('input', text, tags);\n\n                // only if there should be some results\n                //if ( data.length > 0 ) {\n                // prepare inner parsed data\n                self.UpdateParsedInput();\n                // preparing\n                var data = [];\n                // commands\n                if ( !self.data.wcmd.has('deleted') ) {\n                    data.push({item: [':deleted', 0]});\n                }\n                if ( !self.data.wcmd.has('notags') ) {\n                    data.push({item: [':notags', 0]});\n                }\n                if ( !self.data.wcmd.has('day') && !self.data.wcmd.has('week') && !self.data.wcmd.has('month') )\n                    data.push({item: [':day', 0]}, {item: [':week', 0]}, {item: [':month', 0]});\n                // if notags mode than no tags suggesting\n                if ( !self.data.wcmd.has('notags') ) {\n                    var lnids = [];\n                    // get linked tags to already selected\n                    if ( self.data.tinc.length > 0 ) lnids = TagManager.Linked(self.data.tinc);\n                    // iterate all tags\n                    for ( var tnm in window.dataTagsNmlist ) {\n                        // get tag id\n                        var tid = window.dataTagsNmlist[tnm];\n                        // there are no including tags selected or it's one of the linked tag\n                        if ( self.data.tinc.length === 0 || lnids.has(tid) ) {\n                            // was not added so add it\n                            if ( !self.data.tinc.has(tid) && !self.data.texc.has(tid) ) {\n                                data.push({item: [tnm, tid]}, {item: ['-' + tnm, tid]});\n                            }\n                        }\n                    }\n                }\n                console.log('data', data);\n                //}\n\n                update(data);\n                //update(data.filter(function ( item ) {\n                //    return item.item[0].startsWith(text.toLowerCase());\n                //}));\n            },\n            render: function ( item ) {\n                var type  = 'tag',\n                    $body = document.createElement('div'),\n                    $hint;\n\n                $body.textContent = item.item[0];\n\n                if ( item.item[0][0] === ':' ) {\n                    // command\n                    type  = 'cmd';\n                    $hint = document.createElement('div');\n                    $hint.textContent = hint_cmd[item.item[0]];\n                    $body.appendChild($hint);\n                } else {\n                    // tag\n\n                }\n\n                $body.className = type;\n\n                return $body;\n            },\n            onSelect: function ( item ) {\n                console.log(item);\n                self.dom.input.value = item[0];\n            }\n        });/**/\n\n\n        // autocompleter init\n        $(this.dom.input).autocomplete({\n            matchInside: false,\n            selectFirst: true,\n            useDelimiter: true,\n            delimiterChar: ' ',\n            delimiterKeyCode: 32,\n            minChars: 1,\n            autoWidth: 'width',\n            delay: 200,\n            data: [true],\n            showResult: function ( tag ) {\n                // degradation fix\n                return tag;\n\n                var hint = '', fcmd = tag.charAt(0) == ':';\n                if ( fcmd ) {\n                    hint = '<div class=\"hint\">' + hint_cmd[tag] + '</div>';\n                }\n                // wrap to div with icon\n                return '<div class=\"' + (fcmd ? 'cmd' : 'tag') + '\">' + tag + hint + '</div>';\n            },\n            processData: function ( data ) {\n                // only if there should be some results\n                if ( data.length > 0 ) {\n                    // prepare inner parsed data\n                    self.UpdateParsedInput();\n                    // preparing\n                    data = [];\n                    // commands\n                    if ( !self.data.wcmd.has('deleted') ) data.push([':deleted', 0]);\n                    if ( !self.data.wcmd.has('notags') ) data.push([':notags', 0]);\n                    if ( !self.data.wcmd.has('day') && !self.data.wcmd.has('week') && !self.data.wcmd.has('month') )\n                        data.push([':day', 0], [':week', 0], [':month', 0]);\n                    // if notags mode than no tags suggesting\n                    if ( !self.data.wcmd.has('notags') ) {\n                        var lnids = [];\n                        // get linked tags to already selected\n                        if ( self.data.tinc.length > 0 ) lnids = TagManager.Linked(self.data.tinc);\n                        // iterate all tags\n                        for ( var tnm in TagManager.dataNmlist ) {\n                            // get tag id\n                            var tid = TagManager.dataNmlist[tnm];\n                            // there are no including tags selected or it's one of the linked tag\n                            if ( self.data.tinc.length === 0 || lnids.has(tid) )\n                            // was not added so add it\n                                if ( !self.data.tinc.has(tid) && !self.data.texc.has(tid) ) data.push([tnm, tid], ['-' + tnm, tid]);\n                        }\n                    }\n                }\n                return data;\n            }\n        });\n\n        // autocompleter for global access\n        this.ac = $(this.dom.input).data('autocompleter');\n        /**/\n\n        // search input handler\n        //$(this.dom.input).bind('keydown', function(event) {\n        this.dom.input.addEventListener('keydown', function ( event ) {\n            // enter\n            if ( event.keyCode === 13 ) {\n                self.DoSearch(event.ctrlKey);\n            }\n\n            // up\n            if ( event.keyCode === 38 ) {\n                // no autocompleter and valid history cursor\n                if ( !self.ac.active_ && this.data.histpos > 0 ) {\n                    // move up cursor position to the first non-duplicate item in the history\n                    while ( this.data.history[--this.data.histpos] && this.data.history[this.data.histpos].trim() === this.value.trim() ) {\n                    }\n                    // valid position found\n                    if ( this.data.histpos >= 0 ) this.value = this.data.history[this.data.histpos];\n                }\n            }\n\n            // down\n            if ( event.keyCode === 40 ) {\n                // no autocompleter and valid history cursor\n                if ( !self.ac.active_ && this.data.histpos < this.data.history.length - 1 ) {\n                    // move down cursor position to the first non-duplicate item in the history\n                    while ( this.data.history[++this.data.histpos] && this.data.history[this.data.histpos].trim() === this.value.trim() ) {\n                    }\n                    // valid position found\n                    if ( this.data.histpos < this.data.history.length ) this.value = this.data.history[this.data.histpos];\n                }\n            }\n\n            // ctrl + space\n            if ( event.ctrlKey && event.keyCode === 32 ) {\n                // show autocompleter if possible\n                self.ac.activate();\n            }\n        });\n\n        // build notes\n        PerformSearch();\n        // show/hide info and controls\n        NoteList.UpdateCtrlBlock(true);\n    };\n};\n\nwindow.NoteFilter = NoteFilter;\n\n\n// public\nmodule.exports = NoteFilter;\n","/**\n * Main module to work with single note\n * creation, edit or view\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar //autocomplete = require('autocompleter'),\n    app = require('./app'),\n    api = require('./api'),\n    //NoteFilter   = require('./app.note.filter'),\n    NoteList = require('./note.list'),\n    TemplateList = require('./template.list'),\n    TagManager = require('./tag.manager'),\n    templates  = require('./data.templates'),\n    entryTypes = require('./data.entry.types');\n\n\nwindow.NoteEditor = new function () {\n    // for limited scopes\n    var self = this;\n\n    // input data length limit\n    var maxlengthTags = 1024,  // total length of all tags in the input field\n        maxlengthTitle = 256;   // entry name max length\n\n    // flag to indicate if there are some changes\n    // note entries was moved or type is changed\n    // entry added or deleted\n    var changed = false;\n\n    // messages\n    var msgHasChanges = 'The current note has unsaved changes. Do you really want to continue and lost these changes?';\n\n    // hover hints\n    var hint_back = 'Will discard all your current changes and show the template list.';\n    var hint_new = 'Will create a new note based on the current one.';\n    var hint_clone = 'Will save the current note as a copy.';\n    var hint_save = 'Will save all your changes. You can also press Ctrl+Enter';\n\n\n    // component state flag\n    // true - everything is decoded\n    // false - no plain data, everything is encrypted\n    //this.open = false;\n\n    /**\n     * Open the subscriber\n     * master password is accessible\n     * decrypt all the data and show it\n     */\n    // this.EventOpen = function () {\n    //     // open if there is a note\n    //     if ( this.data ) {\n    //         // iterate all entries\n    //         for ( var i = 0; i < this.dom.entries.childNodes.length; i++ ) {\n    //             var entry = this.dom.entries.childNodes[i];\n    //             //with ( this.dom.entries.childNodes[i] ) {\n    //\n    //             // set post data\n    //             entry.post.name_dec = app.decode(entry.post.name);\n    //             entry.post.data_dec = app.decode(entry.post.data);\n    //             // set current data (taking either from post or decrypt)\n    //             entry.data.name_dec = (entry.post.name === entry.data.name) ? entry.post.name_dec : app.decode(entry.data.name);\n    //             entry.data.data_dec = (entry.post.data === entry.data.data) ? entry.post.data_dec : app.decode(entry.data.data);\n    //             // enable all inputs\n    //             entry.dom.name.disabled = entry.dom.data.disabled = false;\n    //             // change input to decrypted values\n    //             entry.dom.name.value = entry.data.name_dec;\n    //             entry.dom.data.value = entry.data.data_dec;\n    //             // update counter value\n    //             entry.dom.data.onkeyup();\n    //             //}\n    //         }\n    //         EnableControls(true);\n    //         // tags block\n    //         this.dom.tags.input.disabled = false;\n    //         this.dom.tags.input.value = TagManager.IDs2Str(this.data.tags).toLowerCase();\n    //         // fill autocompleter\n    //         var data = [];\n    //         // prepare all tags\n    //         for ( var tid in TagManager.dataIdlist ) {\n    //             data.push([TagManager.dataIdlist[tid], tid]);\n    //         }\n    //         $(this.dom.tags.input).data('autocompleter').options.data = data;\n    //     }\n    //     // component state flag\n    //     //this.open = true;\n    // };\n\n    /**\n     * Close the subscriber\n     * master password is expired and cleared\n     * clear all the decrypted data\n     */\n    // this.EventClose = function () {\n    //     // close only if opened at the moment and there is a note\n    //     if ( this.data && this.open ) {\n    //         // iterate all entries\n    //         for ( var i = 0; i < this.dom.entries.childNodes.length; i++ ) {\n    //             var entry = this.dom.entries.childNodes[i];\n    //             //with ( this.dom.entries.childNodes[i] ) {\n    //             // if data changed than reassing (taking either from post or encrypt)\n    //             if ( entry.data.name_dec !== entry.dom.name.value ) entry.data.name = (entry.post.name_dec === entry.dom.name.value) ? entry.post.name : app.encode(entry.dom.name.value);\n    //             if ( entry.data.data_dec !== entry.dom.data.value ) entry.data.data = (entry.post.data_dec === entry.dom.data.value) ? entry.post.data : app.encode(entry.dom.data.value);\n    //             // clear post and current data\n    //             entry.post.name_dec = entry.data.name_dec = null;\n    //             entry.post.data_dec = entry.data.data_dec = null;\n    //             // disable all inputs\n    //             entry.dom.name.disabled = entry.dom.data.disabled = true;\n    //             // change input to default hidden values\n    //             entry.dom.name.value = '********';\n    //             entry.dom.data.value = '[encrypted data]';\n    //             // hide counter value\n    //             entry.dom.counter.innerHTML = '';\n    //             // hide history block and clear content\n    //             entry.dom.history.style.display = 'none';\n    //             elclear(entry.dom.history);\n    //             delete entry.data.history;\n    //             //}\n    //         }\n    //         EnableControls(false);\n    //         // tags block\n    //         this.dom.tags.input.disabled = true;\n    //         this.data.tags = TagManager.Str2IDs(this.dom.tags.input.value.toLowerCase());\n    //         this.dom.tags.input.value = '[encrypted tags]';\n    //         // clear autocompleter\n    //         $(this.dom.tags.input).data('autocompleter').options.data = [];\n    //     }\n    //     // component state flag\n    //     //this.open = false;\n    // };\n\n\n    /**\n     * Quick check if the tag input changed since the last post\n     * @param data tags string\n     * @param post array of tag ids posted\n     * @return bool flag of change\n     */\n    var TagsChanged = function ( data, post ) {\n        // prepare input\n        data = TagManager.Str2Names(data);\n        post = post || [];\n        // different size\n        if ( data.length !== post.length ) return true;\n        // check parsed string\n        for ( var id = null, i = 0; i < data.length; i++ ) {\n            id = TagManager.dataNmlist[data[i]];\n            // new tag not posted to the server\n            if ( !id ) return true;\n            // posted tags not include this id\n            if ( !post.has(id) ) return true;\n        }\n        return false;\n    };\n\n\n    /**\n     * Collect all the note and entries data\n     */\n    var GetData = function () {\n        // local vars\n        var i = 0, entry = null, deleted = [], ids = [];\n\n        // get the list of tags ids and names\n        self.data.tags = TagManager.Str2IDs(self.dom.tags.input.value.toLowerCase());\n        // tags changed since the last post\n        if ( self.data.tags.join() !== self.post.tags.join() ) {\n            // drop flag or copy of tags\n            self.post.tags = (self.data.tags.length === 0) ? 0 : self.data.tags.slice();\n        } else {\n            // no changes so nothing to be sent\n            delete self.post.tags;\n        }\n\n        // clear previous data\n        self.post.entries = [];\n\n        // fill the list of entries to be deleted\n        for ( i = 0; i < self.dom.entries.childNodes.length; i++ )\n            if ( self.dom.entries.childNodes[i].deleted ) deleted.push(self.dom.entries.childNodes[i]);\n\n        // remove deleted entries\n        for ( i = 0; i < deleted.length; i++ ) {\n            // edit mode\n            if ( deleted[i].data.id ) ids.push(deleted[i].data.id);\n            // remove from dom\n            self.dom.entries.removeChild(deleted[i]);\n        }\n        // there are some deleted entry ids\n        if ( ids.length > 0 ) self.post.deleted = ids;\n\n        //TODO: add real entries check (there maybe no one left)\n\n        // iterate all entries\n        for ( i = 0; i < self.dom.entries.childNodes.length; i++ ) {\n            entry = self.dom.entries.childNodes[i];\n            // collected data\n            var post = {};\n            // edit mode\n            if ( entry.data.id ) post.id = entry.data.id;\n            // if type changed since the last save or new mode\n            if ( entry.post.id_type !== entry.data.id_type || entry.data.id === undefined )\n                post.id_type = entry.data.id_type;\n            // entry name changed or new mode\n            if ( entry.post.name_dec !== entry.dom.name.value || entry.data.id === undefined ) {\n                entry.data.name = post.name = (entry.data.name_dec === entry.dom.name.value) ? entry.data.name : app.encode(entry.dom.name.value);\n                entry.data.name_dec = entry.dom.name.value;\n            }\n            // entry value changed or new mode\n            if ( entry.post.data_dec !== entry.dom.data.value || entry.data.id === undefined ) {\n                entry.data.data = post.data = (entry.data.data_dec === entry.dom.data.value) ? entry.data.data : app.encode(entry.dom.data.value);\n                entry.data.data_dec = entry.dom.data.value;\n            }\n            // type change block\n            entry.dom.type.style.display = 'none';\n            // hide history block\n            entry.dom.history.style.display = 'none';\n            // history block clear content\n            elclear(entry.dom.history);\n            delete entry.data.history;\n\n            self.post.entries.push(post);\n        }\n\n        console.log('note data to post', self.post);\n\n        return self.post;\n    };\n\n\n    /**\n     * Saves all note changes\n     * 1. collects note and entries data\n     * 2. does ajax request to save\n     * 3. processing the response\n     */\n    this.Save = function () {\n        // do nothing if there are no modifications\n        if ( !this.HasChanges() ) {\n            return;\n        }\n\n        // disable controls to prevent double posting\n        EnableControls(false);\n        //SetTitleIcon('img/message.loading.gif');\n\n        api.post('note/save/' + (this.data.id || ''), GetData(), function ( error, data ) {\n            if ( error ) {\n                console.error(error);\n            }\n\n            console.log('note save', data);\n\n            if ( data && data.id && data.entries ) {\n                // the note is just created\n                var is_new = !self.data.id ? true : false;\n                // switch to edit mode if necessary\n                self.data.id = data.id;\n                // data container for entries\n                var entries = [];\n                // iterate all entries\n                for ( var i = 0; i < self.dom.entries.childNodes.length; i++ ) {\n                    var entry = self.dom.entries.childNodes[i];\n                    // update data\n                    entry.data.id = data.entries[i].id;\n                    entry.post.name = entry.data.name;\n                    entry.post.name_dec = entry.data.name_dec;\n                    entry.post.data = entry.data.data;\n                    entry.post.data_dec = entry.data.data_dec;\n                    entry.post.id_type = entry.data.id_type;\n                    // clear color from inputs\n                    //$(entry.dom.name).removeClass('changed');\n                    entry.dom.name.classList.remove('changed');\n                    //$(entry.dom.data).removeClass('changed');\n                    entry.dom.data.classList.remove('changed');\n                    //$(self.dom.tags.input).removeClass('changed');\n                    self.dom.tags.input.classList.remove('changed');\n\n                    // change icons according to status\n                    if ( data.entries[i].changed ) entry.dom.icon.src = 'img/field_flag_ok.png';\n                    if ( data.entries[i].added ) entry.dom.icon.src = 'img/field_flag_add.png';\n\n                    // rebuild global data in case some items deleted or added\n                    entries.push(entry.data);\n                }\n                self.data.entries = entries;\n                // tags processed\n                if ( data.tags ) {\n                    // there are tags in response and correspond with sent ones\n                    if ( data.tags instanceof Array && self.data.tags.length === data.tags.length ) {\n                        for ( i = 0; i < data.tags.length; i++ ) {\n                            // check if the ecrypted string\n                            if ( isNaN(self.data.tags[i]) ) {\n                                // add new tag id and enc/dev values to the global lookup tables\n                                TagManager.Add(data.tags[i], self.data.tags[i]);\n                                // replace the ecrypted string with received id\n                                self.data.tags[i] = data.tags[i];\n                            }\n                        }\n                    }\n                    // show ok image\n                    self.dom.tags.icon.src = 'img/field_flag_ok.png';\n                }\n                // fill current tags data\n                self.dom.tags.input.value = TagManager.IDs2Str(self.data.tags).toLowerCase();\n                // confirm posted tags\n                self.post.tags = self.data.tags.slice();\n                // clear deleted entries list\n                delete self.post.deleted;\n                // timer to set default images\n                setTimeout(function () {\n                    // iterate all entries\n                    for ( var i = 0; i < self.dom.entries.childNodes.length; i++ ) {\n                        //with ( self.dom.entries.childNodes[i] )\n                        var child = self.dom.entries.childNodes[i];\n                        //child.dom.icon.src = 'img/field_' + window.dataEntryTypes.data[child.data.id_type][window.dataEntryTypes.defn.name] + '.png';\n                        child.dom.icon.src = 'img/field_' + entryTypes.hash[child.data.id_type].name + '.png';\n                    }\n                    self.dom.tags.icon.src = 'img/field_tag.png';\n                }, 2000);\n\n                // flag reset\n                changed = false;\n\n                NoteFilter.NotesRequest();\n//                if ( is_new ) {\n//                    self.data.ctime = Math.round(new Date().getTime() / 1000);\n//                    NoteList.NoteCreate(self.data);\n//                } else {\n//                    self.data.mtime = Math.round(new Date().getTime() / 1000);\n//                    //NoteList.dom.notes.removeChild(NoteList.dom.notes.active);\n//                    NoteList.NoteUpdate(self.data);\n//                }\n\n//                if ( NoteList.dom.notes.active ) {\n//                    var note = NoteList.dom.notes.active;\n//                    if ( NoteList.NoteVisible(note) ) NoteList.DrawNoteTags(note);\n//                }\n            } else {\n                // invalid response from the server\n            }\n            // enable controls\n            EnableControls(true);\n            //$(self.dom.controls).removeClass('loading');\n            // change icon if necessary\n            SetTitleIcon();\n            //self.Escape();\n        });\n    };\n\n\n    /**\n     * Control button change type\n     * @param entry pointer to the entry data\n     */\n    var EntryBtnConfig = function ( entry ) {\n        // crete list if not exist\n        if ( entry.dom.type.childNodes.length === 0 ) {\n            var list = table(1, 0, {className: 'list'}, {\n                // set old desc\n                onmouseout: function () {\n                    entry.dom.desc.innerHTML = entry.dom.desc.value;\n                }\n            });\n\n            var cell = null;\n            // build type list\n            //for ( var id in window.dataEntryTypes.data ) {\n            for ( var id in entryTypes.hash ) {\n                id = parseInt(id, 10);\n                //cell = element('td', {className: entry.data.id_type === id ? 'current' : 'item'}, window.dataEntryTypes.data[id][window.dataEntryTypes.defn.name], {\n                cell = element('td', {className: entry.data.id_type === id ? 'current' : 'item'}, entryTypes.hash[id].name, {\n                    // set desc on mouse over action\n                    onmouseover: function () {\n                        entry.dom.desc.innerHTML = this.desc;\n                    },\n                    onclick: function () {\n                        if ( this.className == 'item' ) {\n                            // change name if default\n                            //if ( entry.dom.name.value == window.dataEntryTypes.data[entry.data.id_type][window.dataEntryTypes.defn.name] ) {\n                            //entry.dom.name.value = window.dataEntryTypes.data[this.type][window.dataEntryTypes.defn.name];\n                            entry.dom.name.value = entryTypes.hash[this.type].name;\n                            //}\n                            // prepare type, name and value\n                            entry.data.id_type = this.type;\n                            entry.data.name = app.encode(entry.dom.name.value);\n                            entry.data.name_dec = entry.dom.name.value;\n                            entry.data.data = app.encode(entry.dom.data.value);\n                            entry.data.data_dec = entry.dom.data.value;\n                            // clone entry and do some sync\n                            var entry_new = EntryCreate(entry.data);\n                            entry_new.post = entry.post;\n                            entry_new.dom.name.onchange();\n                            entry_new.dom.data.onchange();\n                            // insert and remove\n                            self.dom.entries.insertBefore(entry_new, entry);\n                            self.dom.entries.removeChild(entry);\n                            // set flag\n                            changed = true;\n                        }\n                    }\n                });\n                cell.type = id;\n                //cell.name = window.dataEntryTypes.data[id][window.dataEntryTypes.defn.name];\n                cell.name = entryTypes.hash[id].name;\n                //cell.desc = window.dataEntryTypes.data[id][window.dataEntryTypes.defn.description];\n                cell.desc = entryTypes.hash[id].description;\n                elchild(list, cell);\n            }\n            elchild(entry.dom.type, list);\n        }\n        // show/hide block\n        entry.dom.type.style.display = (entry.dom.type.style.display !== 'block' ? 'block' : 'none');\n    };\n\n\n    /**\n     * Control button to obtain and show entry history\n     * @param entry pointer to the entry data\n     */\n    var EntryBtnHistory = function ( entry ) {\n        // first time\n        if ( !entry.data.history ) {\n            // note and entry are from server\n            if ( self.data.id && entry.data.id ) {\n                elchild(elclear(entry.dom.history), element('div', {className: 'info'}, 'loading ...'));\n\n                api.get('note/history/' + self.data.id + '/' + entry.data.id, function ( error, history ) {\n                    if ( error ) {\n                        console.error(error);\n                        return;\n                    }\n\n                    console.log('note history', history);\n\n                    elclear(entry.dom.history);\n                    entry.data.history = history;\n                    var tbl = element('table', {className: 'maxw'});\n                    if ( history.data.length ) {\n                        for ( var i = 0; i < history.data.length; i++ ) {\n                            var name = history.data[i][history.defn.name] ? app.decode(history.data[i][history.defn.name]) : '';\n                            var data = history.data[i][history.defn.data] ? app.decode(history.data[i][history.defn.data]) : '';\n                            tblrow(tbl, [\n                                // name and data\n                                element('span', {title: name}, (name.length > 20) ? name.slice(0, 15) + '...' : name),\n                                element('span', {title: data}, (data.length > 30) ? data.slice(0, 25) + '...' : data),\n                                // link to use\n                                element('a', {name: name, data: data}, 'use', {\n                                    onclick: function () {\n                                        entry.dom.name.value = this.name;\n                                        entry.dom.data.value = this.data;\n                                        entry.dom.name.onchange();\n                                        entry.dom.data.onchange();\n                                        entry.dom.history.style.display = 'none';\n                                    }\n                                })\n                            ], [{className: 'name'}, {className: 'data'}, {className: 'ctrl'}]);\n                        }\n                        elchild(elclear(entry.dom.history), tbl);\n                    } else {\n                        // no history on the server\n                        elchild(elclear(entry.dom.history), element('div', {className: 'info'},\n                            'there are no history records for this entry'));\n                    }\n                });\n            } else {\n                // new entry\n                entry.data.history = [];\n                elchild(elclear(entry.dom.history), element('div', {className: 'info'},\n                    'there are no history records for this entry'));\n            }\n        }\n        // show/hide block\n        entry.dom.history.style.display = (entry.dom.history.style.display !== 'block' ? 'block' : 'none');\n    };\n\n\n    /**\n     * Control button add new\n     * @param entry pointer to the entry data\n     */\n    var EntryBtnAdd = function ( entry ) {\n        // prepare name and value\n        //var name = window.dataEntryTypes.data[entry.data.id_type][window.dataEntryTypes.defn.name];\n        var name = entryTypes.hash[entry.data.id_type].name;\n        // generate some password if pass type\n        var data = (entry.data.id_type == 4) ? pwdgen(20) : '';\n        // clone\n        var entry_new = EntryCreate({\n            id_type: entry.data.id_type,\n            name: app.encode(name),\n            name_dec: name,\n            data: app.encode(data),\n            data_dec: data\n        });\n        self.dom.entries.insertBefore(entry_new, entry);\n        //$(entry_new.dom.name).addClass('changed');\n        entry_new.dom.name.classList.add('changed');\n        //$(entry_new.dom.data).addClass('changed');\n        entry_new.dom.data.classList.add('changed');\n        changed = true;\n    };\n\n\n    /**\n     * Control button move up\n     * @param entry pointer to the entry data\n     */\n    var EntryBtnUp = function ( entry ) {\n        // can be moved\n        if ( entry.previousSibling ) {\n            self.dom.entries.insertBefore(entry, entry.previousSibling);\n            changed = true;\n        }\n    };\n\n\n    /**\n     * Control button move down\n     * @param entry pointer to the entry data\n     */\n    var EntryBtnDown = function ( entry ) {\n        // can be moved\n        if ( entry.nextSibling ) {\n            self.dom.entries.insertBefore(entry, entry.nextSibling.nextSibling);\n            changed = true;\n        }\n    };\n\n\n    /**\n     * Control button delete\n     * @param entry pointer to the entry data\n     */\n    var EntryBtnDelete = function ( entry ) {\n        if ( self.dom.entries.childNodes.length > 1 ) {\n            // hide entry\n            //$(entry.dom.undo).toggleClass('hidden');\n            entry.dom.undo.classList.toggle('hidden');\n            //$(entry.dom.body).toggleClass('hidden');\n            entry.dom.body.classList.toggle('hidden');\n            // set flag\n            entry.deleted = true;\n            changed = true;\n        }\n    };\n\n\n    /**\n     * Block of note entry title name input with controls\n     * @param entry pointer to the entry data\n     */\n    var EntryBlockTitle = function ( entry ) {\n        // editable name\n        entry.dom.name = element('input', {\n            type: 'text',\n            maxLength: maxlengthTitle,\n            //disabled: !self.open,\n            value: entry.data.name_dec\n        }, '', {\n            onchange: function () {\n                this.value = this.value.trim();\n                // only for edit mode\n                if ( self.data.id ) {\n                    if ( entry.post.name_dec !== null && entry.post.name_dec !== this.value ) {\n                        //$(this).addClass('changed');\n                        this.classList.add('changed');\n                    } else {\n                        //$(this).removeClass('changed');\n                        this.classList.remove('changed');\n                    }\n                }\n            }\n        });\n\n        //$(entry.dom.name).keydown(function(event) {\n        entry.dom.name.addEventListener('keydown', function ( event ) {\n            // up\n            if ( event.keyCode === 38 && entry.previousSibling ) {\n                entry.previousSibling.dom.name.focus();\n            }\n            // down\n            if ( event.keyCode === 40 && entry.nextSibling ) {\n                entry.nextSibling.dom.name.focus();\n            }\n        });\n\n        // icon image\n        entry.dom.icon = element('img', {\n            //src: 'img/field_' + window.dataEntryTypes.data[entry.data.id_type][window.dataEntryTypes.defn.name] + '.png'\n            src: 'img/field_' + entryTypes.hash[entry.data.id_type].name + '.png'\n            //title: 'drag and drop to change the entries order'\n        });\n        // top title line with name and controls\n        entry.dom.title = tblrow(element('table', {className: 'title'}), [entry.dom.icon, entry.dom.name, entry.dom.controls], [{className: 'icon'}, {className: 'name'}, {className: 'controls'}]);\n    };\n\n\n    /**\n     * Block of note entry data input\n     * @param entry pointer to the entry data\n     */\n    var EntryBlockInput = function ( entry ) {\n        // types\n        entry.dom.type = element('div', {className: 'type'});\n        // get the input data max length\n        //var limit = window.dataEntryTypes.data[entry.data.id_type][window.dataEntryTypes.defn.max];\n        var limit = entryTypes.hash[entry.data.id_type].max;\n        // create input depending on entry type\n        if ( entry.data.id_type === 6 || entry.data.id_type === 7 ) {\n            entry.dom.data = element('textarea', {\n                className: 'text',\n                maxLength: limit\n                //disabled: !self.open\n            }, entry.data.data_dec);\n\n            // keyboard navigation\n            //$(entry.dom.data).keydown(function(event) {\n            entry.dom.data.addEventListener('keydown', function ( event ) {\n                //TODO: selectionStart is not cross-browser\n                // up\n                if ( event.keyCode === 38 && entry.previousSibling && this.selectionStart === 0 ) {\n                    entry.previousSibling.dom.data.focus();\n                }\n                // down\n                if ( event.keyCode === 40 && entry.nextSibling && this.selectionStart === this.value.length ) {\n                    entry.nextSibling.dom.data.focus();\n                }\n            });\n        } else {\n            entry.dom.data = element('input', {\n                type: entry.data.id_type === 5 ? 'email' : 'text',\n                maxLength: limit,\n                className: entry.data.id_type === 5 ? 'email' : 'line',\n                //disabled: !self.open,\n                value: entry.data.data_dec\n            });\n\n            // email\n            // if ( entry.data.id_type === 5 ) {\n            //     entry.dom.data.autocomplete = 'email';\n            // }\n\n            // keyboard navigation\n            //$(entry.dom.data).keydown(function(event) {\n            entry.dom.data.addEventListener('keydown', function ( event ) {\n                // up\n                if ( event.keyCode === 38 ) if ( entry.previousSibling ) {\n                    entry.previousSibling.dom.data.focus();\n                }\n                // down\n                if ( event.keyCode === 40 ) if ( entry.nextSibling ) {\n                    entry.nextSibling.dom.data.focus();\n                }\n            });\n        }\n\n        entry.dom.data.autocomplete = 'off';\n\n        // change color if changed in edit mode\n        entry.dom.data.onchange = function () {\n            this.value = this.value.trim();\n            // only for edit mode\n            if ( self.data.id ) {\n                if ( entry.post.data_dec != null && entry.post.data_dec != this.value )\n                //$(this).addClass('changed');\n                    this.classList.add('changed');\n                else\n                //$(this).removeClass('changed');\n                    this.classList.remove('changed');\n            }\n            // in case this is url entry type\n            // if ( entry.data.id_type == 2 ) {\n            //     RequestUrlTitle(this.value);\n            // }\n        };\n\n        // values history\n        entry.dom.history = element('div', {className: 'history'});\n\n        // set chars count\n        entry.dom.data.onkeyup = function () {\n            entry.dom.counter.innerHTML = this.value.length;\n            // red alert if data reached the length limit\n            if ( this.value.length >= this.maxLength && entry.dom.counter.className != 'limit' ) {\n                entry.dom.counter.className = 'limit';\n            } else if ( this.value.length < this.maxLength && entry.dom.counter.className == 'limit' ) {\n                entry.dom.counter.className = '';\n            }\n        };\n        entry.dom.data.onkeydown = entry.dom.data.onkeyup;\n    };\n\n\n    // var RequestUrlTitle = function ( url ) {\n    //     //delete this.data.comment;\n    //     var comment = null;\n    //     // get an empty comment block\n    //     for ( var i = 0; i < self.dom.entries.childNodes.length; i++ ) {\n    //         var entry = self.dom.entries.childNodes[i];\n    //         // plain text type\n    //         if ( entry.data.id_type == 6 && entry.dom.data.value.trim() == '' ) {\n    //             comment = entry.dom.data;\n    //             break;\n    //         }\n    //     }\n    //     // send request only if there is an empty comment entry\n    //     if ( comment ) {\n    //         url = 'http://query.yahooapis.com/v1/public/yql?q=' +\n    //             'select * from html where url=\"' + encodeURIComponent(url) + '\" and xpath=\"/html/head/title\"&format=json';\n    //         $.ajax(url, {crossDomain:true, dataType:'json',\n    //             success: function(data){\n    //                 if ( data && data.query && data.query.results && data.query.results.title ) {\n    //                     comment.value = data.query.results.title;\n    //                     comment.onkeyup();\n    //                     comment.onchange();\n    //                 }\n    //             }\n    //         });\n    //     }\n    // };\n\n\n    /**\n     * Parse data and fill the select list\n     */\n    this.ProceedUrlIcon = function ( data ) {\n        if ( data && data.query && data.query.results ) {\n            console.log(data);\n        }\n    };\n\n\n    /**\n     * Block of note entry hint\n     * @param entry pointer to the entry data\n     */\n    var EntryBlockHint = function ( entry ) {\n        // entry description\n        //entry.dom.desc = element('span', {}, window.dataEntryTypes.data[entry.data.id_type][window.dataEntryTypes.defn.description]);\n        entry.dom.desc = element('span', {}, entryTypes.hash[entry.data.id_type].description);\n        //entry.dom.desc.value = window.dataEntryTypes.data[entry.data.id_type][window.dataEntryTypes.defn.description];\n        entry.dom.desc.value = entryTypes.hash[entry.data.id_type].description;\n        // letters counter with max length check\n        entry.dom.counter = element('span', {className: entry.dom.data.value.length === entry.dom.data.maxLength ? 'limit' : ''}, entry.dom.data.value.length);\n        // bottom entry description and counter\n        entry.dom.hint = tblrow(element('table', {className: 'hint'}), [entry.dom.desc, entry.dom.counter], [{className: 'text'}, {className: 'counter'}]);\n    };\n\n\n    /**\n     * Block of note entry floating controls\n     * @param entry pointer to the entry data\n     */\n    var EntryBlockControls = function ( entry ) {\n        entry.dom.btn_config = element('img', {\n            src: 'img/settings.svg',\n            className: 'button',\n            title: 'change entry type'\n        }, null, {\n            onclick: function () {\n                EntryBtnConfig(entry);\n            }\n        });\n        entry.dom.btn_history = element('img', {\n            src: 'img/history.svg',\n            className: 'button',\n            title: 'show/hide entry hisory values'\n        }, null, {\n            onclick: function () {\n                EntryBtnHistory(entry);\n            }\n        });\n        entry.dom.btn_add = element('img', {\n            src: 'img/add.svg',\n            className: 'button',\n            title: 'add new entry after this one'\n        }, null, {\n            onclick: function () {\n                EntryBtnAdd(entry);\n            }\n        });\n        entry.dom.btn_up = element('img', {\n            src: 'img/arrow_up.svg',\n            className: 'button',\n            title: 'move this entry one row up'\n        }, null, {\n            onclick: function () {\n                EntryBtnUp(entry);\n            }\n        });\n        entry.dom.btn_down = element('img', {\n            src: 'img/arrow_down.svg',\n            className: 'button',\n            title: 'move this entry one row down'\n        }, null, {\n            onclick: function () {\n                EntryBtnDown(entry);\n            }\n        });\n        entry.dom.btn_delete = element('img', {\n            src: 'img/clear.svg',\n            className: 'button',\n            title: 'delete this entry'\n        }, null, {\n            onclick: function () {\n                EntryBtnDelete(entry);\n            }\n        });\n\n        var buttons = [];\n        // this is a password entry\n        if ( entry.data.id_type === 4 ) {\n            //alert(entry.dom.data.type);\n            entry.dom.btn_pwdgen = element('img', {\n                src: 'img/refresh.svg',\n                className: 'button',\n                title: 'generate a new password'\n            }, null, {\n                onclick: function () {\n                    entry.dom.data.value = pwdgen(20);\n                    entry.dom.data.onchange();\n                }\n            });\n            entry.dom.btn_maskpwd = element('img', {\n                src: 'img/visibility_off.svg',\n                className: 'button',\n                title: 'Show password'\n            }, null, {\n                onclick: function () {\n                    if ( entry.dom.data.type === 'text' ) {\n                        this.title = 'Show password';\n                        this.src = 'img/visibility_off.svg';\n                        entry.dom.data.type = 'password';\n                    } else {\n                        this.src = 'img/visibility.svg';\n                        this.title = 'Hide password';\n                        entry.dom.data.type = 'text';\n                    }\n                }\n            });\n            entry.dom.data.type = 'password';\n            //entry.dom.data.autocomplete = 'off';\n            buttons.push(entry.dom.btn_maskpwd);\n            buttons.push(entry.dom.btn_pwdgen);\n        }\n        // all other buttons\n        buttons.push(entry.dom.btn_config, entry.dom.btn_history, entry.dom.btn_add, entry.dom.btn_up, entry.dom.btn_down, entry.dom.btn_delete);\n        // add entry control buttons\n        return entry.dom.controls = element('div', {className: 'hidden'}, buttons);\n    };\n\n\n    /**\n     * Single entry creation\n     * @param data entry details\n     */\n    var EntryCreate = function ( data ) {\n        // body of the entry\n        var entry = element('div', {className: 'entry'});\n        // entry dom elements\n        entry.dom = {\n            undo: element('div', {className: 'undo hidden'}),\n            body: element('div', {className: 'body'})\n        };\n        // entry db data\n        entry.data = data || {};\n        // entry type, name and value after each saving\n        entry.post = {\n            id_type: data.id_type,\n            name: data.name,\n            name_dec: data.name_dec,\n            data: data.data,\n            data_dec: data.data_dec\n        };\n\n        // blocks\n        EntryBlockInput(entry);\n        EntryBlockHint(entry);\n        EntryBlockControls(entry);\n        EntryBlockTitle(entry);\n\n        // fill entry\n        elchild(entry.dom.body, [entry.dom.title, entry.dom.type, entry.dom.data, entry.dom.history, entry.dom.hint]);\n        elchild(entry, [entry.dom.undo, entry.dom.body]);\n        // undo delete\n        elchild(entry.dom.undo, element('a', {}, 'restore deleted entry', {\n            onclick: function () {\n                //$(entry.dom.undo).toggleClass('hidden');\n                entry.dom.undo.classList.toggle('hidden');\n                //$(entry.dom.body).toggleClass('hidden');\n                entry.dom.body.classList.toggle('hidden');\n                entry.deleted = false;\n            }\n        }));\n\n        // events\n        //$(entry).mouseenter(function(){\n        entry.addEventListener('mouseenter', function () {\n            // only if not closed\n            //if ( self.open ) {\n            if ( !entry.previousSibling ) {\n                entry.dom.btn_up.className = 'disabled';\n            } else {\n                entry.dom.btn_up.className = 'button';\n            }\n            if ( !entry.nextSibling ) {\n                entry.dom.btn_down.className = 'disabled';\n            } else {\n                entry.dom.btn_down.className = 'button';\n            }\n            //TODO: add real entries check (there are hidden entries so failure here)\n            if ( self.dom.entries.childNodes.length === 1 ) {\n                entry.dom.btn_delete.className = 'disabled';\n            } else {\n                entry.dom.btn_delete.className = 'button';\n            }\n            //$(entry.dom.controls).fadeIn();\n            entry.dom.controls.classList.remove('hidden');\n            //}\n        });\n        //$(entry).mouseleave(function(){\n        entry.addEventListener('mouseleave', function () {\n            // only if not closed\n            //if ( self.open ) {\n            //$(entry.dom.controls).fadeOut();\n            entry.dom.controls.classList.add('hidden');\n            //}\n        });\n        //$(entry).click(function(){\n        // iterate all entries\n//            for ( var i = 0; i < self.dom.entries.childNodes.length; i++ ) {\n//                entry = self.dom.entries.childNodes[i];\n//                $(entry.dom.body).removeClass('active');\n//            }\n//            $(this.dom.body).addClass('active');\n        //});\n        return entry;\n    };\n\n\n    /**\n     * Block of note title\n     */\n    var BlockTitle = function () {\n        self.dom.title = element('div', {className: 'caption'});\n        self.dom.title.icon = element('img', {width: 32, height: 32});\n        elchild(self.dom.title, tblrow(element('table', {className: 'maxw'}), [\n                self.dom.title.icon,\n                [element('div', {className: 'main'}, 'Note')/*, element('div',{className:'hint'},'creation, edit or view')*/],\n                [self.data.ctime ? element('div', {}, 'created: ' + TimestampToDateStr(self.data.ctime)) : '',\n                    self.data.mtime ? element('div', {}, 'edited: ' + TimestampToDateStr(self.data.mtime)) : '']\n            ], [{className: 'icon'}, {className: 'name'}, {className: 'info'}])\n        );\n    };\n\n\n    /**\n     * Block of note entries\n     */\n    var BlockEntries = function () {\n        // list of all entries\n        self.dom.entries = element('div', {className: 'entries'});\n\n        // iterate all prepared entries\n        for ( var i = 0; i < self.data.entries.length; i++ ) {\n            // new entry creation and add to list\n            elchild(self.dom.entries,\n                EntryCreate(self.data.entries[i]));\n        }\n\n        // drag and drop\n        //$(self.dom.entries).sortable({containment:'parent', cursor:'move', handle:'.title .icon'});\n\n        // return container\n        return self.dom.entries;\n    };\n\n\n    /**\n     * Block of tags work\n     */\n    var BlockTags = function () {\n        // tags input\n        var input = element('input', {\n            type: 'text',\n            maxLength: maxlengthTags,\n            //disabled: !self.open,\n            className: 'line',\n            value: ''\n        });\n        // icon\n        var icon = element('img', {src: 'img/field_tag.png'});\n        // tags container\n        self.dom.tags = element('div', {className: 'tags'}, [\n            tblrow(element('table', {className: 'title'}), [icon, 'tags'], [{className: 'icon'}, {className: 'name'}]),\n            input,\n            element('div', {className: 'hint'}, 'list of associated tags separated by space')\n        ]);\n        // pointers\n        self.dom.tags.input = input;\n        self.dom.tags.icon = icon;\n        // change color if changed in edit mode\n        input.onchange = function () {\n            // only for edit mode\n            if ( self.data.id ) {\n                // tags changed since the last post\n                if ( TagsChanged(this.value, self.post.tags) ) {\n                    //$(this).addClass('changed');\n                    this.classList.add('changed');\n                } else {\n                    //$(this).removeClass('changed');\n                    this.classList.remove('changed');\n                }\n            }\n            // change icon if necessary\n            //SetTitleIcon();\n        };\n\n        var data = [];\n        // prepare all tags\n        for ( var tid in TagManager.dataIdlist ) {\n            data.push([TagManager.dataIdlist[tid], tid]);\n        }\n\n        /*autocomplete({\n            minLength: 1,\n            input: self.dom.tags.input,\n            fetch: function ( text, update ) {\n                console.log('data', data);\n                // get tags array\n                var result = [],\n                    tags = self.dom.tags.input.value.toLowerCase().match(/(\\S+)/g);\n\n                console.log('tags', tags);\n\n                // truncate available suggestion options\n                data.forEach(function ( item ) {\n                    if ( !tags.has(item[0]) ) {\n                        result.push({item: item});\n                    }\n                });\n\n                console.log('result', result);\n                update(result);\n            },\n            render: function ( item ) {\n                var $body = document.createElement('div');\n\n                $body.textContent = item.item[0];\n\n                return $body;\n            },\n            onSelect: function ( item ) {\n                console.log(item);\n                //self.dom.input.value = item[0];\n            }\n        });/**/\n\n        // add autocompletion\n        $(self.dom.tags.input).autocomplete({\n            matchInside: false,\n            selectFirst: true,\n            useDelimiter: true,\n            delimiterChar: ' ',\n            delimiterKeyCode: 32,\n            minChars: 1,\n            autoWidth: 'width',\n            delay: 200,\n            data: data,\n            showResult: function ( tag ) {\n                // degradation fix\n                return tag;\n\n                // wrap to div with icon\n                //return '<div class=\"tag\">' + tag + '</div>';\n            },\n            processData: function ( data ) {\n                //console.log('data', data);\n                // get tags array\n                var result = [],\n                    tags = self.dom.tags.input.value.toLowerCase().match(/(\\S+)/g);\n\n                //console.log('tags', tags);\n\n                // truncate available suggestion options\n                data.forEach(function ( item ) {\n                    if ( !tags.has(item[0]) ) {\n                        result.push(item);\n                    }\n                });\n\n                //console.log('result', result);\n                return result;\n            }\n        });/**/\n\n        // var timer = null;\n        // input.onkeydown = function() {\n        //    // only for edit mode\n        //    if ( self.data.id ) {\n        //        if ( timer ) clearTimeout(timer);\n        //        timer = setTimeout(function(){self.dom.tags.input.onchange();}, 300);\n        //    }\n        // }\n\n        // return container\n        return self.dom.tags;\n    };\n\n\n    /**\n     * Block of button controls\n     */\n    var BlockControls = function () {\n        // container\n        self.dom.tcontrols = element('div', {className: 'tbuttons'}, [\n            element('input', {\n                type: 'button',\n                value: 'Back',\n                className: 'button left',\n                title: hint_back\n            }, null, {\n                onclick: function () {\n                    self.Escape();\n                }\n            }),\n            element('input', {\n                type: 'button',\n                value: 'New',\n                className: 'button left',\n                title: hint_new\n            }, null, {\n                onclick: function () {\n                    self.New();\n                }\n            }),\n            element('input', {\n                type: 'button',\n                value: 'Duplicate',\n                className: 'button left',\n                title: hint_clone\n            }, null, {\n                onclick: function () {\n                    self.Clone();\n                }\n            }),\n            element('input', {\n                type: 'button',\n                value: 'Save',\n                className: 'button bold',\n                title: hint_save\n            }, null, {\n                onclick: function () {\n                    self.Save();\n                }\n            })\n        ]);\n\n        self.dom.bcontrols = element('div', {className: 'bbuttons'}, [\n            //element('input', {type:'button', value:'Back', className:'button'}, null, {onclick:function(){self.Escape();}}),\n            element('input', {\n                type: 'button',\n                value: 'Save',\n                className: 'button bold',\n                title: hint_save\n            }, null, {\n                onclick: function () {\n                    self.Save();\n                }\n            })\n        ]);\n    };\n\n\n    /**\n     * Event management\n     */\n    var SetEvents = function () {\n        // save\n        //$(self.dom.handle).bind('keypress', function(event) {\n        self.dom.handle.addEventListener('keypress', function ( event ) {\n            if ( event.keyCode === 13 ) {\n                // save on Ctrl+Enter\n                if ( event.ctrlKey ) {\n                    //event.preventDefault();\n                    //event.stopPropagation();\n                    self.Save();\n                } else {\n                    // Enter pressed\n                }\n            }\n        });\n        // cancel\n        //$(self.dom.handle).bind('keydown', function(event) {\n        self.dom.handle.addEventListener('keydown', function ( event ) {\n            if ( event.keyCode === 27 ) {\n                // exit from here\n                self.Escape();\n            }\n        });\n    };\n\n\n    /**\n     * Enebles/disables the control buttons\n     * @param state bool flag\n     */\n    var EnableControls = function ( state ) {\n        if ( self.dom.bcontrols ) {\n            var controls = self.dom.bcontrols.childNodes;\n            for ( var i = 0; i < controls.length; i++ ) {\n                controls[i].disabled = !state;\n            }\n        }\n    };\n\n\n    /**\n     * Asks user about modifications\n     */\n    this.ConfirmExit = function () {\n        return confirm(msgHasChanges);\n    }\n\n\n    /**\n     * Saves the current note as new\n     */\n    this.Clone = function () {\n        // clear note and entries ids\n        delete this.data.id;\n        this.data.entries.forEach(function ( entry ) {\n            delete entry.id;\n        });\n        // reset tags\n        this.post.tags = [];\n        // set flag\n        changed = true;\n        // saving\n        this.Save();\n        // focus to the first input\n        this.dom.entries.childNodes[0].dom.data.focus();\n    }\n\n\n    /**\n     * Prepares a new note with the same set of entries as the current note has\n     */\n    this.New = function () {\n        var name, data, entries = [];\n        // iterate the current entry list\n        this.data.entries.forEach(function ( entry ) {\n            // prepare name and data\n            //name = window.dataEntryTypes.data[entry.id_type][window.dataEntryTypes.defn.name];\n            name = entryTypes.hash[entry.id_type].name;\n            // generate some password if pass type\n            data = (entry.id_type == 4) ? pwdgen(20) : '';\n            // append the entry list\n            entries.push({\n                id_type: entry.id_type,\n                name: app.encode(name),\n                name_dec: name,\n                data: app.encode(data),\n                data_dec: data\n            });\n        });\n        // if user confirmed the exit\n        if ( this.Escape(true) ) {\n            // replace the entry list with the new one\n            this.data.entries = entries;\n            // compile all blocks together\n            Build();\n            // update the icon\n            SetTitleIcon();\n            // set flag\n            changed = true;\n            // focus to the first input\n            this.dom.entries.childNodes[0].dom.data.focus();\n        }\n    }\n\n\n    /**\n     * Leaves the current note editing\n     * asks user about modifications if present\n     * @param noswitch bool flag to not return back to the template list\n     * @return bool true if the note was escaped\n     */\n    this.Escape = function ( noswitch ) {\n        // check current note modifications\n        var has_changes = NoteEditor.HasChanges();\n        // not changed or user confirmed his wish\n        if ( !has_changes || (has_changes && this.ConfirmExit()) ) {\n            // get note from the list using current id\n            var note = NoteList.GetNoteByID(self.data.id);\n            // found\n            if ( note !== false ) {\n                // remove acitve cursor\n                NoteList.SetNotesState([note], 'active', false);\n            }\n            // clear previous content\n            elclear(this.dom.handle);\n            // set data\n            this.data = {tags: [], entries: []};\n            // data to be send on save\n            this.post = {tags: []};\n            //this.open = true;\n            changed = false;\n            // not full escape\n            if ( !noswitch ) {\n                self.Show(false);\n                TemplateList.Show(true);\n            }\n            return true;\n        }\n        return false;\n    };\n\n\n    /**\n     * Creates a new note\n     */\n    this.Create = function ( template ) {\n        console.time('entry create');\n        // set data\n        this.data = {tags: [], entries: []};\n        // data to be send on save\n        this.post = {tags: []};\n        // local vars\n        //var id_template = template[window.dataTemplates.defn.id],\n        var //id_template = template[window.dataTemplates.defn.id],\n            self = this,\n            id_type, name, data, tag;\n\n        // template is given\n        if ( template ) {\n            // fill the list of entries\n            //for ( var i = 0; i < window.dataTemplateEntries.data[id_template].length; i++ ) {\n            template.entries.forEach(function ( entry ) {\n                //for ( var i in window.dataTemplateEntries.data[id_template] ) {\n                // get the entry type\n                //id_type = window.dataTemplateEntries.data[id_template][i][window.dataTemplateEntries.defn.id_type];\n                // prepare name and data\n                //name = window.dataTemplateEntries.data[id_template][i][window.dataTemplateEntries.defn.name];\n                // generate some password if pass type\n                data = (entry.id === 4) ? pwdgen(20) : '';\n                // adding\n                self.data.entries.push({\n                    id_type: entry.id,\n                    name: app.encode(entry.name),\n                    name_dec: entry.name,\n                    data: app.encode(data),\n                    data_dec: data\n                });\n            });\n\n            // default tag\n            tag = template.name;\n            this.data.tags = TagManager.Str2IDs(tag);\n            // no templates selected so just add one simple entry\n        } else {\n            //name = window.dataEntryTypes.data[1][window.dataEntryTypes.defn.name];\n            name = entryTypes.hash[1].name;\n            data = tag = '';\n            // adding\n            this.data.entries = [{\n                id_type: 1,\n                name: app.encode(name),\n                name_dec: name,\n                data: app.encode(data),\n                data_dec: data\n            }];\n        }\n        // compile all blocks together\n        Build();\n        // tags plain string\n        this.dom.tags.input.value = tag.toLowerCase();\n        SetTitleIcon();\n        // focus to the first input\n        this.dom.entries.childNodes[0].dom.data.focus();\n        console.timeEnd('entry create');\n    };\n\n\n    /**\n     * Loads the existing note\n     * @param data note details\n     */\n    this.Load = function ( data ) {\n        console.time('entry load');\n        // set data\n        this.data = data;\n        // data to be send on save\n        self.post = {\n            tags: data.tags ? data.tags.slice() : [] // copy of tags\n        };\n        // data is given and valid\n        if ( data.id && data.entries && data.entries instanceof Array ) {\n            // decode data in each entry and reorganize\n            for ( var i = 0; i < data.entries.length; i++ ) {\n                var entry = data.entries[i];\n                // wrap encoded and decoded values\n                entry.name_dec = app.decode(entry.name);\n                entry.data_dec = app.decode(entry.data);\n            }\n        } else {\n            // invalid input so switch to new mode\n            this.Create();\n        }\n        // compile all blocks together\n        Build();\n        // tags plain string\n        this.dom.tags.input.value = TagManager.IDs2Str(this.data.tags).toLowerCase();\n        SetTitleIcon();\n        console.timeEnd('entry load');\n    };\n\n\n    /**\n     * Returns the open at the moment note id\n     */\n    this.GetNoteID = function () {\n        return (this.data && this.data.id ? this.data.id : null);\n    };\n\n\n    var SetTitleIcon = function ( icon ) {\n        var tags;\n\n        if ( !icon ) {\n            icon = 'img/tags/note.svg';\n            tags = self.dom.tags.input.value.toLowerCase().match(/(\\S+)/g);\n\n            // check parsed string\n            if ( tags ) {\n                tags.forEach(function ( tag ) {\n                    var has = templates.some(function ( template ) {\n                        return template.name === tag;\n                    });\n\n                    if ( has ) {\n                        icon = 'img/tags/' + tag + '.svg';\n                    }\n                });\n            }\n        }\n\n        console.log('SetTitleIcon', icon);\n\n        if ( self.dom.title.icon.src.search(icon) < 0 ) {\n            self.dom.title.icon.src = icon;\n        }\n    };\n\n\n    /**\n     * Compiles all blocks together\n     */\n    var Build = function () {\n        //with ( self ) {\n        changed = false;\n        // all blocks\n        BlockTitle();\n        BlockEntries();\n        BlockTags();\n        BlockControls();\n\n        // clear previous handle content\n        elclear(self.dom.handle);\n\n        // build all blocks together\n        elchild(self.dom.handle, [\n            self.dom.title,\n            self.dom.tcontrols,\n            self.dom.entries,\n            element('div', {className: 'divider'}),\n            self.dom.tags,\n            element('div', {className: 'divider'}),\n            self.dom.bcontrols\n        ]);\n        //}\n        TemplateList.Show(false);\n        self.Show(true);\n\n    };\n\n\n    /**\n     * Shows/hides the component\n     * @param state visibility flag: true - show, false - hide\n     */\n    this.Show = function ( state ) {\n        this.dom.handle.style.display = state ? 'block' : 'none';\n    };\n\n\n    /**\n     * Checks if there are any unsaved modificatons\n     * @return bool flag\n     */\n    this.HasChanges = function () {\n        var i, entry, flag = changed;\n        // note is opened\n        if ( this.data && this.data.entries && this.data.entries.length > 0 ) {\n            // not sure if has changes already\n            if ( !changed ) {\n                // iterate all entries\n                for ( i = 0; i < this.dom.entries.childNodes.length; i++ ) {\n                    entry = this.dom.entries.childNodes[i];\n                    //fb(i, entry.post.data_dec, entry.dom.data.value);\n                    //fb(i, entry.post.name_dec, entry.dom.name.value);\n                    //fb(i, entry.post.id_type, entry.data.id_type);\n                    if ( (entry.post.data_dec != null && entry.post.data_dec != entry.dom.data.value) ||\n                        (entry.post.name_dec != null && entry.post.name_dec != entry.dom.name.value) ||\n                        (entry.post.id_type != entry.data.id_type) ) {\n                        // change flag and skip all the rest checks\n                        flag = true;\n                        break;\n                    }\n                }\n                // still no changes so check tags\n                if ( !flag && TagsChanged(this.dom.tags.input.value.toLowerCase(), this.post.tags) ) flag = true;\n            }\n        }\n        return flag;\n    };\n\n\n    /**\n     * Main init method\n     * @param params list of configuration parameters\n     */\n    this.Init = function ( params ) {\n        // check input\n        if ( !params.handle ) {\n            return;\n        }\n\n        // html parent object\n        this.dom = {handle: params.handle};\n        // handler on note save\n        this.onsave = params.onsave || null;\n        // handler on cancel note adding or edit\n        this.oncancel = params.oncancel || null;\n\n        // event handlers\n        SetEvents();\n    };\n};\n\n\n// public\n//module.exports = NoteEditor;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar list = [\n        {\n            id: 1,\n            max: 1024,\n            name: 'line',\n            icon: 'https://image.flaticon.com/icons/svg/23/23187.svg',\n            description: 'title or short one line text description'\n        },\n        {\n            id: 2,\n            max: 2048,\n            name: 'uri',\n            icon: 'https://image.flaticon.com/icons/svg/117/117965.svg',\n            description: 'any addresses - http/https/ftp/ssh or file path'},\n        {\n            id: 3,\n            max: 1024,\n            name: 'login',\n            icon: 'https://image.flaticon.com/icons/svg/149/149452.svg',\n            description: 'user name, login or email in some cases'\n        },\n        {\n            id: 4,\n            max: 4096,\n            name: 'password',\n            icon: 'https://image.flaticon.com/icons/svg/263/263069.svg',\n            description: 'any secret letters sequence'\n        },\n        {\n            id: 5,\n            max: 1024,\n            name: 'email',\n            icon: 'https://image.flaticon.com/icons/svg/60/60381.svg',\n            description: 'email address line'\n        },\n        {\n            id: 6,\n            max: 65535,\n            name: 'text',\n            icon: 'https://image.flaticon.com/icons/svg/140/140952.svg',\n            description: 'plain text entry for notes'\n        },\n        {\n            id: 7,\n            max: 65535,\n            name: 'html',\n            icon: 'https://image.flaticon.com/icons/svg/25/25252.svg',\n            description: 'formatted text entry for notes'\n        }\n    ],\n    hash = {};\n\n\nlist.forEach(function ( type ) {\n    hash[type.id] = type;\n});\n\n\n// public\nmodule.exports = {\n    list: list,\n    hash: hash\n};\n","/**\n * Helper functions\n */\n\nvar sjcl = require('./sjcl.min');\n\n\n// array prototypes\nArray.prototype.has = function ( value ) {\n    return this.indexOf(value) >= 0;\n};\n// Array.prototype.empty = function () {\n//     return !(this.length > 0);\n// };\n// Array.prototype.each = function ( func ) {\n//     var i, l = this.length;\n//\n//     for ( i = 0; i < l; i++ ) {\n//         func(this[i], i);\n//     }\n// };\n// IE compatibility\n// if ( !Array.indexOf ) {\n//     Array.prototype.indexOf = function ( obj, start ) {\n//         var i;\n//         for ( i = (start || 0); i < this.length; i++ ) {\n//             if ( this[i] === obj ) { return i; }\n//         }\n//         return -1;\n//     };\n// }\n\n// string prototypes\n// String.prototype.trim = function() {\n//    return this.replace(/^\\s+|\\s+$/g,\"\");\n// };\n// String.prototype.ltrim = function() {\n//    return this.replace(/^\\s+/g,\"\");\n// };\n// String.prototype.rtrim = function () {\n//     return this.replace(/\\s+$/g, '');\n// };\n\n\n/**\n * Firebug debug compatible with IE\n * free list of params\n */\n// function fb () {\n//     if ( window.console && window.console.info )\n//         // send all arguments to firebug\n//         console.info(arguments.length == 1 ? arguments[0] : arguments);\n//\n// }\n\n\n/**\n * Moves focus to the given html element on enter key pressed\n * @param src object to track\n * @param dest given html element to jump to\n */\n// window.onEnterFocus = function onEnterFocus ( src, dest ) {\n//     src.onkeypress = function ( event ) {\n//         if ( event.keyCode || event.keyCode ) {\n//             if ( (event.keyCode === 13) || (event.keyCode === 13) ) {\n//                 dest.focus();\n//\n//                 return false;\n//             }\n//         }\n//\n//         return true;\n//     };\n// };\n\n\n/**\n * Clicks the given html element on enter key pressed\n * @param src object to track\n * @param dest given html element to click to\n */\nwindow.onEnterClick = function onEnterClick ( src, dest ) {\n    src.addEventListener('keydown', function ( event ) {\n        if ( event.keyCode === 13 ) {\n            //dest.focus();\n            dest.click();\n        }\n    });\n};\n\n\n/**\n * New link type to select value from the set\n * @param obj html element to expand\n * @param data list of values and titles like {300:{title:'5 minutes',next:1200}, 1200:{title:'20 minutes',next:300}}\n * @param id default value to select\n */\n// function LinkSet ( obj, data, id ) {\n//     if ( !obj ) return;\n//\n//     this.obj  = obj;\n//     this.data = data;\n//\n//     /**\n//      * Set currect value and title from the data\n//      * @param id to select\n//      */\n//     this.ItemSelect = function ( id ) {\n//         // if somebody alredy have 1 munute (probably should be removed in the future)\n//         if ( id == 60 ) data[60] = {next:300,  title: '1 minute'};\n//         // check input\n//         if ( id && data && data[id] ) {\n//             // set value and html\n//             this.obj.value = id;\n//             this.obj.innerHTML = data[id].title;\n//             var pthis = this;\n//             // set onclick handler and pass this object pointer for future selection\n//             this.obj.onclick = function(){\n//                 pthis.ItemSelect(data[id].next);\n//             };\n//         }\n//     };\n//\n//     // do the default selection\n//     this.ItemSelect(id);\n// }\n\n\n/**\n * Adds the given value to the obj as a child recursively\n * @param obj DOMElement to be appended\n * @param value data to add (simple text values, DOMElements, array of DOMElements)\n * @return DOMElement owner of all added data\n * @example elchild(mydiv, 'Hello world'); // simple text value\n * @example elchild(mydiv, someotherdiv); // DOMElement\n * @example elchild(mydiv, [div1, div2, div3]); // DOMElement list\n * @example elchild(mydiv, [div1, 'hello', 'world']); // combined case\n */\nwindow.elchild = function elchild ( obj, value ) {\n    // check input\n    if ( obj && value ) {\n        // DOMElement\n        if ( value.nodeType ) {\n            obj.appendChild(value);\n        } else if ( value instanceof Array ) {\n            // array of DOMElements of simple values\n            for ( var i = 0; i < value.length; i++ ) {\n                elchild(obj, value[i]);\n            }\n        } else {\n            // simple values\n            obj.appendChild(document.createTextNode(value));\n        }\n    }\n\n    return obj;\n};\n\n\n/**\n * Removes all child elements from the given object\n * @param obj DOMElement to be updated\n * @return DOMElement cleared\n */\nwindow.elclear = function elclear ( obj ) {\n    if ( obj && obj.hasChildNodes() ) {\n        while ( obj.hasChildNodes() ) {\n            obj.removeChild(obj.firstChild);\n        }\n    }\n\n    return obj;\n};\n\n\n/**\n * Assigns a list of attribute values to the given object\n * @param obj DOMElement\n * @param attr list of attributes with values\n * @return DOMElement the same as the given one\n * @example elattr(myimg, {src:'face.png', className:'main'});\n */\nwindow.elattr = function elattr ( obj, attr ) {\n    // check if DOMElement\n    if ( obj && obj.nodeType && attr && attr instanceof Object ) {\n        for ( var akey in attr ) {\n            obj[akey] = attr[akey];\n        }\n    }\n\n    return obj;\n};\n\n\n/**\n * Creates a DOMElement with given options\n * @param name html element name (a, img, div, ...)\n * @param attr list of attributes with values\n * @param [data] inner html value\n * @param [handlers] list of DOMElement event handlers (onclick, onload, ...)\n * @return {Node}\n * @example element('link', {rel:'stylesheet', type:'text/css', href:'http://some.url/'});\n */\nwindow.element = function element ( name, attr, data, handlers ) {\n    var tag = document.createElement(name);\n\n    elattr(tag, attr);\n    elchild(tag, data);\n\n    // set all handlers\n    if ( handlers && handlers instanceof Object ) {\n        for ( var handler in handlers ) {\n            tag[handler] = handlers[handler];\n        }\n    }\n\n    return tag;\n};\n\n\nwindow.table = function table ( rows, cols, attr, handlers ) {\n    var el = element('table', attr, null, handlers);\n\n    for ( var i = 0; i < rows; i++ ) {\n        el.insertRow(-1);\n        for ( var j = 0; j < cols; j++ ) {\n            el.rows[i].insertCell(-1);\n        }\n    }\n\n    return el;\n};\n\n\nwindow.tblrow = function tblrow ( obj, cells, attrs ) {\n    var row = obj.insertRow(-1);\n\n    for ( var i = 0; i < cells.length; i++ ) {\n        row.insertCell(-1);\n        elchild(row.cells[i], cells[i]);\n        elattr(row.cells[i], attrs[i]);\n    }\n\n    return obj;\n};\n\n\n/**\n * converts date from timestamp to simple date string\n * 1209589200 -> 2012.02.03 00:23\n * @return {String}\n */\nwindow.TimestampToDateStr = function TimestampToDateStr ( tstamp ) {\n    var theDate = tstamp ? new Date(tstamp * 1000) : new Date();\n    var nyear = theDate.getFullYear();\n    var nmonth = theDate.getMonth() + 1;\n    var nday = theDate.getDate();\n    var hour = theDate.getHours();\n    var min = theDate.getMinutes();\n\n    if ( nmonth < 10 ) nmonth = '0' + nmonth;\n    if ( nday < 10 ) nday = '0' + nday;\n    if ( hour < 10 ) hour = '0' + hour;\n    if ( min < 10 ) min = '0' + min;\n\n    return nyear + '.' + nmonth + '.' + nday + ' ' + hour + ':' + min;\n};\n\n\n// function time_data ( timestamp ) {\n//     var dt = new Date(timestamp * 1000);\n//     var dl = {y:dt.getFullYear(), m:dt.getMonth()+1, d:dt.getDate(), h:dt.getHours(), i:dt.getMinutes()};\n//     // extend with zero where necessary\n//     if ( dl.m < 10 ) dl.m = '0' + dl.m;\n//     if ( dl.d < 10 ) dl.d = '0' + dl.d;\n//     if ( dl.h < 10 ) dl.h = '0' + dl.h;\n//     if ( dl.i < 10 ) dl.i = '0' + dl.i;\n//     return dl;\n// }\n\n\n/**\n * Password generator with SJCL entropy mechanism\n * @param {Number} length size of the result password\n * @return {String}\n */\nwindow.pwdgen = function pwdgen ( length ) {\n    var charset = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%&{}()[]=+?*<>;,.:-_',\n        letters = [], letter, result = '';\n\n    while ( result.length < length ) {\n        letter = null;\n        // generate a char\n        if ( sjcl.random.isReady() ) {\n            // get\n            letter = String.fromCharCode(parseInt(sjcl.codec.hex.fromBits(sjcl.random.randomWords(1)).substr(0, 2), 16));\n            // invalidate if not in dictionary\n            if ( charset.indexOf(letter) === -1 ) letter = null;\n        } else {\n            letter = charset.charAt(Math.floor(Math.random() * charset.length));\n        }\n        // something is found\n        if ( letter ) {\n            // check if not a duplicate\n            if ( letters.indexOf(letter.toLowerCase()) < 0 ) {\n                // fill already used chars list\n                letters.push(letter.toLowerCase());\n                // fill the result\n                result += letter;\n            }\n        }\n    }\n    return result;\n};\n\n\n/**\n * Ajax cross-domain request helper\n * @param url link to external resource\n */\n// function jsonp ( url ) {\n//     // create element and get data to callback\n//     var script = element('script', {type:'text/javascript', src:url});\n//     // insert to DOM\n//     document.body.appendChild(script);\n//     // clear after data processed in 5 secs\n//     setTimeout(function(){\n//         console.log('jsonp script tag clearing');\n//         document.body.removeChild(script);\n//     }, 10000);\n// }\n\n\n/**\n * Set input watermark hint\n * @param obj html element\n * @param text string hint\n * @param cin string color\n */\n// function watermark ( obj, text, cin ) {\n//     $(obj)\n//         .focus(function(){\n//             if ( this.value == text ) $(this).val('').css({color:cin});\n//         })\n//         .focusout(function(){\n//             if ( !this.value ) $(this).val(text).css({color:''});\n//         });\n// }\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar app = require('./app'),\n    sjcl = require('./sjcl.min'),\n    api = require('./api'),\n    DialogModal = require('./modal'),\n    FieldList = require('./fldlist');\n\n\nvar DlgExport = null;\nvar DlgOptions = null;\nvar DlgPassGet = null;\nvar DlgUserLogin = null;\nvar DlgUserRegister = null;\n\n\n//document.addEventListener('DOMContentLoaded', function () {\nDlgExport = new DialogModal({\n    width: 750,\n    title: 'Data export',\n    hint: 'Here you can get all your data unencrypted.',\n    dom: {},\n\n    onCreate: function () {\n        this.SetContent(this.dom.text = element('textarea', {className: 'export'}));\n    },\n\n    /**\n     * Open the subscriber\n     * master password is accessible\n     * decrypt all the data and show it\n     */\n    EventOpen: function () {\n        if ( window.exportData ) {\n            setTimeout(function () {\n                DlgExport.Show();\n                for ( var idNote in window.exportData.notes ) {\n                    // check type\n                    if ( window.exportData.notes[idNote] instanceof Array ) {\n                        window.exportData.notes[idNote].forEach(function ( entry ) {\n                            var name = app.decode(entry.name, true);\n                            var data = app.decode(entry.data, true);\n                            if ( name && data ) {\n                                DlgExport.dom.text.value += name + ': ' + data + '\\n';\n                            }\n                        });\n                    }\n                    // check type\n                    if ( window.exportData.note_tags[idNote] instanceof Array ) {\n                        var tags = [];\n                        window.exportData.note_tags[idNote].forEach(function ( idTag ) {\n                            if ( window.exportData.tags[idTag] ) tags.push(app.decode(window.exportData.tags[idTag], true));\n                        });\n                        if ( tags.length > 0 ) {\n                            DlgExport.dom.text.value += 'tags: ' + tags.join(' ') + '\\n';\n                        }\n                    }\n                    DlgExport.dom.text.value += '\\n';\n                }\n                // strip\n                DlgExport.dom.text.value = DlgExport.dom.text.value.trim();\n                window.exportData = null;\n            }, 50);\n        }\n    },\n\n    /**\n     * close the subscriber\n     * master password is expired and cleared\n     * clear all the decrypted data\n     */\n    EventClose: function () {\n        DlgExport.Close();\n    },\n\n    controls: {\n        'Close': {\n            main: true,\n            onClick: function () {\n                //var modal = this.modal;\n                this.modal.Close();\n            }\n        }\n    }\n});\n\n\nDlgOptions = new DialogModal({\n    width: 650,\n    title: 'Options',\n    hint: 'Here you can create/restore backups and export all your data.',\n\n    onCreate: function () {\n        var file = element('input', {\n            type: 'file', name: 'file', id: 'file-upload', onchange: function () {\n                hint.innerHTML = this.value;\n                fbtn.value = 'File selected';\n            }\n        });\n        var fbtn = element('input', {\n            type: 'button', className: 'button long', value: 'Choose file ...', onclick: function () {\n                //$(file).trigger('click');\n                file.click();\n            }\n        });\n        var hint = element('div', {className: 'fhint'});\n\n        this.SetContent([\n            element('div', {className: 'desc'}, \"Backup is an archived package of all your encrypted data. It can't be read by human but can be used to restore your account info or setup a copy on some other FortNotes instance.\"),\n            element('input', {\n                type: 'button', className: 'button long', value: 'Create backup', onclick: function () {\n                    window.location = api.defaults.server + 'user/export/txt';\n                }\n            }),\n            element('div', {className: 'desc'}, \"Please specify your previously downloaded backup package and then press the \\\"Restore backup\\\" button. It will upload your backup to the server and replace all your current data with the data from this backup. Warning: this operation can't be reverted!\"),\n            element('div', {}, [\n                element('input', {\n                    type: 'button', className: 'button long', value: 'Restore backup', onclick: function () {\n                        var btn = this;\n                        btn.value = 'Uploading ...';\n                        btn.disabled = true;\n\n                        var data = new FormData();\n                        data.append('file', file.files[0]);\n                        console.log(data);\n\n                        api.postForm('user/import/txt', data, function ( error, data ) {\n                            if ( error ) {\n                                console.error(error);\n                                return;\n                            }\n\n                            console.log('user import', data);\n\n                            btn.value = 'Restore backup';\n                            btn.disabled = false;\n                            if ( data && data.error ) {\n                                alert('Restore from backup failed. Error: ' + data.error);\n                            } else {\n                                alert('The restore process has completed successfully and now the page will be reloaded to apply the restored data.');\n                                // We must reload the whole page to update window.dataTags\n                                window.location.reload();\n                            }\n                        });\n\n                        // $.ajax({\n                        //     url: 'user/import/txt',\n                        //     data: data,\n                        //     cache: false,\n                        //     contentType: false,\n                        //     processData: false,\n                        //     type: 'POST',\n                        //     dataType: 'json',\n                        //     success: function(data) {\n                        //         btn.value = 'Restore backup';\n                        //         btn.disabled = false;\n                        //         if ( data && data.error ) {\n                        //             alert('Restore from backup failed. Error: ' + data.error);\n                        //         } else {\n                        //             alert('The restore process has completed successfully and now the page will be reloaded to apply the restored data.');\n                        //             // We must reload the whole page to update window.dataTags\n                        //             window.location.reload();\n                        //         }\n                        //     }\n                        // });\n                    }\n                }), ' ',\n                fbtn,\n                hint\n            ]),\n            element('div', {className: 'desc'}, \"It's possible to export all the data in a human readable form in order to print it or save in file on some storage. It'll give all the data in plain unencrypted form. The password is required.\"),\n            element('input', {\n                type: 'button', className: 'button long', value: 'Export data', onclick: function () {\n                    var btn = this;\n\n                    btn.value = 'Loading ...';\n                    btn.disabled = true;\n\n                    api.get('user/export/plain', function ( error, data ) {\n                        if ( error ) {\n                            console.error(error);\n                            return;\n                        }\n\n                        console.log('user export', data);\n\n                        btn.value = 'Export data';\n                        btn.disabled = false;\n                        window.exportData = data;\n                        app.expirePass();\n                    });\n                }\n            })\n        ]);\n    },\n\n    /**\n     * close the subscriber\n     * master password is expired and cleared\n     * clear all the decrypted data\n     */\n    EventClose: function () {\n        DlgOptions.Close();\n    },\n\n    controls: {\n        Close: {\n            main: true,\n            onClick: function () {\n                this.modal.Close();\n            }\n        }\n    }\n});\n\n\nDlgPassGet = new DialogModal({\n    width: 500,\n    title: 'Password',\n    hint: 'Please enter your password to unlock encrypted data.',\n    data: {attempts: 0},\n\n    onCreate: function () {\n        this.data.fldlist = new FieldList({\n            cols: [\n                {className: 'colname'},\n                {className: 'colvalue'}\n            ],\n            attr: {}\n        });\n        this.data.pass = element('input', {type: 'password', autocomplete: 'current-password', className: 'line'});\n        this.data.linkset = element('a', {className: 'combo', title: 'click to change the password storing time'});\n        onEnterClick(this.data.pass, this.params.controls['Continue'].dom);\n\n        this.data.fldlist.AddRow([\n            [\n                element('span', {className: 'fldname'}, 'password'),\n                element('br'),\n                element('span', {className: 'fldhint'}, 'your secret key')\n            ],\n            [\n                element('input', {\n                    type: 'text',\n                    autocomplete: 'username',\n                    className: 'hidden',\n                    value: app.get('username_last_used', '')\n                }),\n                this.data.pass\n            ]\n        ], {});\n        //this.data.fldlist.AddRow([null, ['remember password for ', this.data.linkset]], {});\n\n        this.SetContent(element('form', {}, this.data.fldlist.dom.table));\n    },\n\n    onShow: function () {\n        // new LinkSet(DlgPassGet.data.linkset, {\n        //     300:   {next:1200,  title: '5 minutes'},\n        //     1200:  {next:3600,  title: '20 minutes'},\n        //     3600:  {next:18000, title: '1 hour'},\n        //     18000: {next:86400, title: '5 hours'},\n        //     86400: {next:300,   title: '1 day'}\n        // }, app.get('pass_store_time', 300));\n    },\n\n    /**\n     * close the subscriber\n     * master password is expired and cleared\n     * clear all the decrypted data\n     */\n    EventClose: function () {\n        DlgPassGet.Show({escClose: false});\n    },\n\n    controls: {\n        'Log off': {\n            main: false,\n            onClick: function () {\n                this.modal.Close();\n                Logout();\n            }\n        },\n        Continue: {\n            main: true,\n            onClick: function () {\n                var modal = this.modal;\n                var pass = modal.data.pass.value;\n                // check pass\n                if ( app.checkPass(pass) ) {\n                    initData(window.dataUser, pass, function () {\n                        //app.set('pass_store_time', modal.data.linkset.value, true);\n                        //app.setPass(pass);\n                        modal.data.attempts = 0;\n                        // reset value\n                        modal.data.pass.value = '';\n                        modal.Close();\n                        //NoteFilter.SetFocus();\n                    });\n                    // if ( modal.data.linkset.value ) {\n                    //     //fb(modal.data.linkset.value);\n                    //     app.set('pass_store_time', modal.data.linkset.value, true);\n                    //     app.setPassTime(modal.data.linkset.value);\n                    // }\n                } else {\n                    modal.data.pass.focus();\n                    modal.data.attempts++;\n                    if ( modal.data.attempts === 1 )\n                        modal.SetMessage('Password is invalid!');\n                    else\n                        modal.SetMessage(['Password is invalid!', element('br'), 'Logged attempts: ' + modal.data.attempts]);\n                }\n            }\n        }\n    }\n});\n\n\nDlgUserLogin = new DialogModal({\n    width: 500,\n    title: 'Authentication',\n    hint: \"Welcome back! Please authorize.\",\n    data: {attempts: 0},\n\n    onCreate: function () {\n        this.data.fldlist = new FieldList({\n            cols: [\n                {className: 'colname'},\n                {className: 'colvalue'}],\n            attr: {}\n        });\n        this.data.name = element('input', {\n            className: 'line',\n            autocomplete: 'username',\n            type: 'text',\n            value: app.get('username_last_used', '')\n        });\n        this.data.pass = element('input', {\n            className: 'line',\n            autocomplete: 'current-password',\n            type: 'password'\n        });\n        this.data.serv = element('input', {\n            className: 'line',\n            autocomplete: 'server',\n            type: 'url',\n            value: app.get('server', 'https://fortnotes.com/')\n        });\n\n        //onEnterFocus(this.data.name, this.data.pass);\n        onEnterClick(this.data.pass, this.params.controls['Login'].dom);\n\n        this.data.fldlist.AddRow([\n            [element('span', {className: 'fldname'}, 'username'),\n                element('br'),\n                element('span', {className: 'fldhint'}, 'your name or email')],\n            this.data.name\n        ], {});\n        this.data.fldlist.AddRow([\n            [element('span', {className: 'fldname'}, 'password'),\n                element('br'),\n                element('span', {className: 'fldhint'}, 'your secret key')],\n            this.data.pass\n        ], {});\n        this.data.fldlist.AddRow([\n            [element('span', {className: 'fldname'}, 'server'),\n                element('br'),\n                element('span', {className: 'fldhint'}, 'data storage')],\n            this.data.serv\n        ], {});\n        this.SetContent(element('form', {}, this.data.fldlist.dom.table));\n    },\n\n    controls: {\n        'Register': {\n            onClick: function () {\n                this.modal.Close();\n                DlgUserRegister.Show({escClose: false});\n            }\n        },\n        'Login': {\n            main: true,\n            onClick: function () {\n                var modal = this.modal;\n                // get name and pass\n                var username = modal.data.name.value;\n                var password = modal.data.pass.value;\n                // verification\n                if ( username && password ) {\n                    // ajax request\n                    username = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(username));\n                    password = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(password));\n                    // block all inputs and buttons\n                    modal.EnableControls(false);\n                    modal.data.name.disabled = true;\n                    modal.data.pass.disabled = true;\n                    if ( modal.data.attempts > 1 ) {\n                        modal.SetLoading(\"Sending server request ...\");\n                    }\n\n                    app.set('server', modal.data.serv.value, true);\n                    api.defaults.server = modal.data.serv.value;\n\n                    api.post('user/auth', {name: username, pass: password, mode: 'login'}, function ( error, data ) {\n                        if ( error ) {\n                            console.error(error);\n                            modal.SetMessage('Request error.', 'error');\n                            return;\n                        }\n\n                        console.log('user auth', data);\n\n                        if ( data ) {\n                            // check returned data\n                            if ( data && data.id ) {\n                                initData(data, modal.data.pass.value, function () {\n                                    // save user name of last login\n                                    app.set('username_last_used', modal.data.name.value, true);\n                                    //app.setPass(modal.data.pass.value);\n                                    // reset values\n                                    modal.data.name.value = '';\n                                    modal.data.pass.value = '';\n                                    //modal.SetHint();\n                                    //modal.SetContent();\n                                    //$(modal.dom.footer).hide();\n                                    //modal.SetMessage(['Authentication was completed successfully.', element('br'), 'Entering secure private section ...'], 'auth');\n                                    // redirect to home with delay\n                                    //setTimeout(function(){\n                                    //window.location.href = window.location.href;\n                                    modal.Close();\n                                    //NoteFilter.SetFocus();\n\n                                    //window.pageInit.style.display = 'none';\n                                    //window.pageMain.style.display = 'block';\n                                    //}, 500);\n                                });\n                                return;\n                            } else {\n                                modal.data.attempts++;\n                                if ( modal.data.attempts === 1 ) {\n                                    modal.SetMessage('Invalid user name or password.', 'error');\n                                } else {\n                                    modal.SetMessage(['Invalid user name or password.', element('br'), 'Logged attempts: ' + modal.data.attempts], 'error');\n                                }\n                            }\n                        } else {\n                            modal.SetMessage('Invalid response from the server.');\n                        }\n                        // unblock all inputs and buttons\n                        modal.EnableControls(true);\n                        modal.data.name.disabled = false;\n                        modal.data.pass.disabled = false;\n                    });\n                } else {\n                    modal.SetMessage('Empty user name or password.');\n                }\n            }\n        }\n    }\n});\n\n\nDlgUserRegister = new DialogModal({\n    width: 550,\n    title: 'Registration',\n    hint: \"You are going to register in the system. Please note that the password you are going to enter will be used not only to login but also to encrypt/decrypt your data so choose a strong and long password. Your registration data won't be sent to the server in plain unencrypted form. Only hashes are stored on the server. We don't know your password and will never ask you to send it to us but at the same time we won't be able to remind it to you so please keep that password utmost safe.\",\n    data: {attempts: 0},\n\n    onShow: function () {\n        var self = this;\n\n        api.get('captcha/uri', function ( error, data ) {\n            if ( error ) {\n                console.error(error);\n                return;\n            }\n\n            console.log('user captcha', data);\n\n            if ( data && data.src ) {\n                self.data.cimg.src = api.defaults.server + data.src;\n            } else {\n                self.SetHint('New accounts registration is disabled.');\n                self.SetContent('');\n            }\n        });\n    },\n\n    onCreate: function () {\n        this.data.fldlist = new FieldList({\n            cols: [\n                {className: 'colname'},\n                {className: 'colvalue'}],\n            attr: {}\n        });\n        this.data.name = element('input', {type: 'text', autocomplete: 'username', className: 'line'});\n        this.data.pass1 = element('input', {type: 'password', autocomplete: 'new-password', className: 'line'});\n        this.data.pass2 = element('input', {type: 'password', autocomplete: 'new-password', className: 'line'});\n        this.data.cimg = element('img', {width: 161, height: 75});\n        this.data.code = element('input', {\n            type: 'text',\n            autocomplete: 'off',\n            className: 'line cline',\n            title: 'case insensitive code above'\n        });\n\n        // onEnterFocus(this.data.name, this.data.pass1);\n        // onEnterFocus(this.data.pass1, this.data.pass2);\n        // onEnterFocus(this.data.pass2, this.data.code);\n        onEnterClick(this.data.code, this.params.controls['Register'].dom);\n\n        this.data.fldlist.AddRow([\n            [element('span', {className: 'fldname'}, 'username'),\n                element('br'),\n                element('span', {className: 'fldhint'}, 'your name or email')],\n            this.data.name\n        ], {});\n        this.data.fldlist.AddRow([\n            [element('span', {className: 'fldname'}, 'password'),\n                element('br'),\n                element('span', {className: 'fldhint'}, 'your secret key')],\n            this.data.pass1\n        ], {});\n        this.data.fldlist.AddRow([\n            [element('span', {className: 'fldname'}, 'confirm password'),\n                element('br'),\n                element('span', {className: 'fldhint'}, 'your secret key once more')],\n            this.data.pass2\n        ], {});\n        this.data.fldlist.AddRow([\n            [element('span', {className: 'fldname'}, 'captcha'),\n                element('br'),\n                element('span', {className: 'fldwhint'}, 'enter the code on the image to make sure this is not an automated registration')],\n            [this.data.cimg, element('br'), this.data.code]\n        ], {});\n        //console.log(this.dom.footer);\n        //$(this.dom.footer).hide();\n        this.dom.footer.classList.add('hidden');\n        var self = this;\n        this.SetContent(element('a', {}, \"I understand that my password can't be restored and will keep it safe\", {\n            onclick: function () {\n                var container = document.getElementById('simplemodal-container');\n\n                self.SetHint('Keep your password safe - you are the only one who knows it so there is no way to restore it!');\n                //$('#simplemodal-container').css('top', ($('#simplemodal-container').css('top').replace('px','') - 80) + 'px');\n                container.style.top = parseInt(container.style.top, 10) - 100 + 'px';\n                self.SetContent(element('form', {}, self.data.fldlist.dom.table));\n                //$(self.dom.footer).show();\n                self.dom.footer.classList.remove('hidden');\n                self.data.name.focus();\n            }\n        }));\n    },\n\n    controls: {\n        Cancel: {\n            onClick: function () {\n                this.modal.Close();\n            }\n        },\n        Register: {\n            main: true,\n            onClick: function () {\n                var modal = this.modal;\n                // get name and pass\n                var password, username = modal.data.name.value;\n                var pass1 = modal.data.pass1.value;\n                var pass2 = modal.data.pass2.value;\n                // verification\n                if ( username && pass1 && pass2 && pass1 === pass2 ) {\n                    // make hash\n                    username = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(username));\n                    password = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(pass1));\n                    // block all inputs and buttons\n                    modal.EnableControls(false);\n                    modal.data.name.disabled = true;\n                    modal.data.pass1.disabled = true;\n                    modal.data.pass2.disabled = true;\n                    if ( modal.data.attempts > 1 ) {\n                        modal.SetLoading(\"Sending server request ...\");\n                    }\n\n                    api.post('user/auth', {\n                        name: username,\n                        pass: password,\n                        code: modal.data.code.value,\n                        mode: 'register'\n                    }, function ( error, data ) {\n                        if ( error ) {\n                            console.error(error);\n                            modal.SetMessage('Request error.', 'error');\n                            return;\n                        }\n\n                        console.log('user auth', data);\n\n                        if ( data ) {\n                            if ( data.code !== false ) {\n                                // check returned data\n                                if ( data && data.id ) {\n                                    initData(data, pass1, function () {\n                                        // save user name for future logins\n                                        app.set('username_last_used', modal.data.name.value, true);\n                                        //app.setPass(password);\n                                        // reset values\n                                        modal.data.name.value = '';\n                                        modal.data.pass1.value = '';\n                                        modal.data.pass2.value = '';\n                                        //modal.SetHint();\n                                        //modal.SetContent();\n                                        //$(modal.dom.footer).hide();\n                                        //modal.dom.footer.classList.add('hidden');\n                                        //modal.SetMessage(['Registration was completed successfully.', element('br'), 'Entering secure private section ...'], 'auth');\n                                        // redirect to home with delay\n                                        //setTimeout(function(){\n                                        //window.location.href = window.location.href;\n                                        modal.Close();\n\n                                        //window.pageInit.style.display = 'none';\n                                        window.pageMain.style.display = 'block';\n                                        //}, 500);\n                                    });\n                                    return;\n                                } else {\n                                    modal.data.attempts++;\n                                    if ( modal.data.attempts === 1 )\n                                        modal.SetMessage(['Invalid user name or password.', element('br'), 'There maybe already a user with the same name or there are some technical problems on the server.'], 'error');\n                                    else\n                                        modal.SetMessage(['Invalid user name or password.', element('br'), 'Logged attempts: ' + modal.data.attempts], 'error');\n                                }\n                            } else {\n                                modal.SetMessage('Invalid captcha code. Please correct it and try once again.');\n                            }\n                        } else {\n                            modal.SetMessage('Invalid responce from the server.');\n                        }\n                        // unblock all inputs and buttons\n                        modal.EnableControls(true);\n                        modal.data.name.disabled = false;\n                        modal.data.pass1.disabled = false;\n                        modal.data.pass2.disabled = false;\n                    });\n                } else {\n                    modal.SetMessage(\"Empty one of the required field or passwords don't match.\");\n                }\n            }\n        }\n    }\n});\n\n\napp.subscribe(DlgExport);\napp.subscribe(DlgOptions);\napp.subscribe(DlgPassGet);\n\nwindow.DlgExport = DlgExport;\nwindow.DlgOptions = DlgOptions;\nwindow.DlgPassGet = DlgPassGet;\nwindow.DlgUserLogin = DlgUserLogin;\nwindow.DlgUserRegister = DlgUserRegister;\n//});\n\n\n// public\nmodule.exports = {\n    DlgExport: DlgExport,\n    DlgOptions: DlgOptions,\n    DlgPassGet: DlgPassGet,\n    DlgUserLogin: DlgUserLogin,\n    DlgUserRegister: DlgUserRegister\n};\n","/**\n * Modal window wrapper\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nfunction DialogModal ( params ) {\n    this.params = params;\n    this.data = params.data || {};\n\n    // html elements of the dialog\n    this.dom = {};\n\n    this.SetWidth = function ( value ) {\n        this.dom.body.style.width = value + 'px';\n    };\n\n    this.Show = function ( params ) {\n        params = params || {};\n        if ( this.params.onShow && this.params.onShow instanceof Function ) {\n            this.params.onShow.call(this);\n        }\n        $(this.dom.main).modal(params);\n    };\n\n    this.Close = function ( delay ) {\n        if ( delay ) {\n            var self = this;\n            setTimeout(function () {\n                $.modal.close();\n                self.Reset();\n            }, parseInt(delay, 10));\n        } else {\n            $.modal.close();\n            this.Reset();\n        }\n    };\n\n    this.Reset = function () {\n        this.SetMessage();\n    };\n\n    this.SetTitle = function ( hint ) {\n\n    };\n\n    this.SetHint = function ( hint ) {\n        if ( hint ) {\n            if ( this.dom.hint.childNodes.length === 0 ) {\n                this.dom.hint.appendChild(element('div', {className: 'info'}, hint));\n            }\n            this.dom.hint.childNodes[0].innerHTML = hint;\n            this.dom.hint.style.display = '';\n        } else {\n            this.dom.hint.style.display = 'none';\n        }\n    };\n\n    this.SetMessage = function ( text, type ) {\n        if ( text ) {\n            type = type || 'warning';\n            elchild(elclear(this.dom.message), element('div', {className: 'message ' + type}, text));\n            this.dom.message.style.display = '';\n        } else {\n            this.dom.message.style.display = 'none';\n        }\n    };\n\n    this.SetLoading = function ( text ) {\n        this.SetMessage(text, 'loading');\n    };\n\n    this.SetContent = function ( content ) {\n        if ( content ) {\n            elclear(this.dom.content);\n            elchild(this.dom.content, content);\n        } else {\n            this.dom.content.style.display = 'none';\n        }\n    };\n\n    this.EnableControls = function ( state ) {\n        if ( this.params.controls ) {\n            for ( var cname in this.params.controls ) {\n                this.params.controls[cname].dom.disabled = !state;\n            }\n        }\n    };\n\n    this.Init = function () {\n        this.dom.body = element('div', {className: 'body'}, [\n            this.dom.title = element('div', {className: 'block title'}, this.params.title),\n            this.dom.hint = element('div', {className: 'block hint'}),\n            this.dom.content = element('div', {className: 'block content'}),\n            this.dom.message = element('div', {className: 'block info'}),\n            this.dom.footer = element('div', {className: 'block footer'})\n        ]);\n\n        this.dom.main = element('div', {className: 'dialogmodal'}, this.dom.body);\n\n        if ( this.params.width ) this.SetWidth(this.params.width);\n\n        this.SetHint(this.params.hint);\n        this.SetMessage(this.params.message);\n\n        if ( this.params.controls ) {\n            for ( var cname in this.params.controls ) {\n                var cdata = this.params.controls[cname];\n                cdata.dom = element('input', {type: 'button', value: cname, className: 'button'});\n                // for inline indirect future use\n                cdata.dom.modal = this;\n                // default action\n                if ( cdata.main ) cdata.dom.className += ' bold';\n                // set callback\n                if ( cdata.onClick && cdata.onClick instanceof Function ) {\n                    cdata.dom.onclick = cdata.onClick;\n                }\n                this.dom.footer.appendChild(cdata.dom);\n            }\n        }\n\n        if ( this.params.onCreate && this.params.onCreate instanceof Function ) {\n            this.params.onCreate.call(this);\n        }\n\n        if ( this.params.EventClose && this.params.EventClose instanceof Function ) {\n            this.EventClose = this.params.EventClose;\n        }\n        if ( this.params.EventOpen && this.params.EventOpen instanceof Function ) {\n            this.EventOpen = this.params.EventOpen;\n        }\n\n        if ( this.params.content ) {\n            this.params.content.style.display = '';\n            this.dom.content.appendChild(this.params.content);\n        }\n    };\n    this.Init();\n}\n\n\n// public\nmodule.exports = DialogModal;\n","/**\n * Table manager for fields\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n/**\n * @param params list of configuration parameters\n *     cols - name of table columns (also class names for corresponding cells)\n *     attr - table attributes overwriting the default ones\n */\nfunction FieldList ( params ) {\n    this.params = params;\n\n    // html elements\n    this.dom = {};\n\n    this.SetCols = function ( cols ) {\n        this.params.cols = cols;\n    };\n\n    this.AddRow = function ( cells, attr ) {\n        if ( cells && cells instanceof Array && cells.length === this.params.cols.length ) {\n            var cell = null;\n            var row = this.dom.table.insertRow(-1);\n            elattr(row, attr);\n            for ( var i = 0; i < this.params.cols.length; i++ ) {\n                cell = row.insertCell(-1);\n                cell.className = this.params.cols[i];\n                elchild(cell, cells[i]);\n                elattr(cell, this.params.cols[i]);\n            }\n            return row;\n        }\n        return false;\n    };\n\n    this.AddDivider = function ( cells, attr ) {\n        var row = this.dom.table.insertRow(-1);\n        var cell = row.insertCell(-1);\n        elattr(cell, {colspan: this.params.cols.length});\n        elchild(cell, element('div', {className: 'divider'}));\n    };\n\n    this.Init = function () {\n        this.dom.table = element('table', {className: 'fldlist'});\n        elattr(this.dom.table, this.params.attr);\n    };\n    this.Init();\n}\n\n\n// public\nmodule.exports = FieldList;\n"],"sourceRoot":""}